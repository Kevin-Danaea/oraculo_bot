#!/usr/bin/env python3
"""
Script para reiniciar el procesamiento hist√≥rico desde donde se qued√≥.
Actualizado para funcionar con procesador_historico.py y mostrar logs en tiempo real.
"""

import subprocess
import sys
import os
import time

def process_single_file(file_path, file_name):
    """
    Procesa un solo archivo .zst y lo mueve al completar.
    Muestra logs en tiempo real del procesador.
    
    Returns:
        bool: True si se proces√≥ exitosamente, False si fall√≥
    """
    print(f"üìä Procesando archivo: {file_name}")
    print("üöÄ Iniciando procesamiento con logs en tiempo real...")
    print("=" * 60)
    
    try:
        # Ejecutar el procesador sin capturar output para ver logs en tiempo real
        # stdout=None, stderr=None permite que los logs se muestren directamente
        result = subprocess.run(
            [sys.executable, "procesador_historico.py", file_path], 
            stdout=None,  # Permitir que los logs se muestren en tiempo real
            stderr=None,  # Permitir que los errores se muestren en tiempo real
            check=True
        )
        
        print("=" * 60)
        print("‚úÖ Procesamiento completado exitosamente")
        
    except subprocess.CalledProcessError as e:
        print("=" * 60)
        print(f"‚ùå Error en procesamiento: c√≥digo de salida {e.returncode}")
        print("üìã Revisa los logs arriba para m√°s detalles sobre el error")
        return False
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Procesamiento interrumpido por el usuario")
        return False
    
    # Mover el archivo procesado (m√°s seguro que eliminarlo)
    try:
        print(f"üì¶ Moviendo archivo procesado: {file_name}")
        
        # Esperar un momento para que se liberen los handles del archivo
        time.sleep(2)
        
        # Crear carpeta "procesados" si no existe
        processed_dir = os.path.join(os.path.dirname(file_path), "procesados")
        os.makedirs(processed_dir, exist_ok=True)
        
        processed_path = os.path.join(processed_dir, file_name)
        
        # Intentar mover con reintentos
        for attempt in range(3):
            try:
                os.rename(file_path, processed_path)
                print(f"‚úÖ Archivo movido a: {processed_path}")
                return True
            except OSError as e:
                if attempt < 2:  # No es el √∫ltimo intento
                    print(f"‚è≥ Intento {attempt + 1} fall√≥, esperando 3 segundos...")
                    time.sleep(3)
                else:
                    # √öltimo intento fall√≥
                    print(f"‚ö†Ô∏è  Procesamiento exitoso pero no se pudo mover el archivo: {e}")
                    print(f"üìÅ Puedes moverlo manualmente: {file_path}")
                    return True  # Consideramos exitoso aunque no se pudo mover
                    
    except Exception as e:
        print(f"‚ö†Ô∏è  Error moviendo archivo: {e}")
        print(f"üìÅ El archivo permanece en: {file_path}")
        return True  # Consideramos exitoso el procesamiento

def check_prerequisites():
    """Verifica que todos los requisitos est√©n disponibles."""
    print("üîç Verificando prerequisitos...")
    
    # Verificar procesador principal
    if not os.path.exists("procesador_historico.py"):
        print("‚ùå Error: No se encontr√≥ procesador_historico.py")
        return False
    print("‚úÖ procesador_historico.py encontrado")
    
    # Verificar comando zstd
    try:
        subprocess.run(['zstd', '--version'], capture_output=True, check=True)
        print("‚úÖ Comando zstd disponible")
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå Error: Comando 'zstd' no encontrado")
        print("üí° Instala zstd: winget install facebook.zstd")
        return False
    
    return True

def show_current_status():
    """Muestra el estado actual del procesamiento."""
    print("üìä ESTADO ACTUAL DEL PROCESAMIENTO:")
    print("-" * 40)
    
    # Verificar checkpoint
    checkpoint_file = "procesamiento_checkpoint.txt"
    if os.path.exists(checkpoint_file):
        try:
            with open(checkpoint_file, 'r') as f:
                line_number = int(f.read().strip())
            print(f"üîÑ Checkpoint encontrado: reanudar√° desde l√≠nea {line_number:,}")
        except:
            print("‚ö†Ô∏è  Checkpoint encontrado pero no se pudo leer")
    else:
        print("üöÄ No hay checkpoint - iniciar√° desde el principio")
    
    # Verificar URLs procesadas
    urls_file = "urls_procesadas.txt"
    if os.path.exists(urls_file):
        try:
            with open(urls_file, 'r', encoding='utf-8') as f:
                url_count = sum(1 for line in f if line.strip())
            print(f"üìù URLs ya procesadas: {url_count:,} (se saltar√°n duplicados)")
        except:
            print("‚ö†Ô∏è  Archivo de URLs procesadas encontrado pero no se pudo leer")
    else:
        print("üÜï No hay URLs procesadas - analizar√° todos los posts")

def main():
    print("ü§ñ REINICIADOR DE PROCESAMIENTO HIST√ìRICO")
    print("=" * 60)
    
    # Verificar prerequisitos
    if not check_prerequisites():
        print("\n‚ùå Faltan prerequisitos. Terminando script.")
        sys.exit(1)
    
    # Mostrar estado actual
    show_current_status()
    
    # Directorio de archivos
    submissions_dir = r'C:\Users\USER\Downloads\reddit\submissions'
    
    # Verificar que el directorio existe
    if not os.path.exists(submissions_dir):
        print(f"\n‚ùå Error: No se encontr√≥ el directorio {submissions_dir}")
        sys.exit(1)
    
    # Procesar todos los archivos .zst autom√°ticamente
    total_processed = 0
    total_failed = 0
    
    print("\nü§ñ MODO AUTOMATIZADO: Procesando archivos .zst secuencialmente")
    print("üí° Los logs del procesador se mostrar√°n en tiempo real")
    print("‚èπÔ∏è  Usa Ctrl+C para interrumpir si es necesario")
    print("=" * 60)
    
    while True:
        # Buscar archivos .zst disponibles
        try:
            zst_files = [f for f in os.listdir(submissions_dir) if f.endswith('.zst')]
        except Exception as e:
            print(f"‚ùå Error accediendo al directorio: {e}")
            break
        
        if not zst_files:
            print(f"\nüéâ ¬°PROCESAMIENTO COMPLETADO!")
            print(f"üìä RESUMEN FINAL:")
            print(f"   ‚úÖ Archivos procesados exitosamente: {total_processed}")
            print(f"   ‚ùå Archivos que fallaron: {total_failed}")
            print("=" * 60)
            break
        
        # Ordenar archivos cronol√≥gicamente (por nombre)
        zst_files.sort()
        
        # Tomar el primer archivo disponible
        current_file = zst_files[0]
        file_path = os.path.join(submissions_dir, current_file)
        
        print(f"\nüìÇ Archivos restantes: {len(zst_files)}")
        print(f"üìÑ Archivo actual: {current_file}")
        
        # Procesar el archivo
        success = process_single_file(file_path, current_file)
        
        if success:
            total_processed += 1
            print(f"\n‚úÖ Archivo {current_file} completado exitosamente")
            print(f"üìà Progreso: {total_processed} completados, {len(zst_files)-1} restantes")
        else:
            total_failed += 1
            print(f"\n‚ùå Archivo {current_file} fall√≥.")
            
            # Preguntar si continuar o detenerse
            print(f"üìä ESTADO ACTUAL:")
            print(f"   ‚úÖ Procesados: {total_processed}")
            print(f"   ‚ùå Fallidos: {total_failed}")
            print(f"   üìÑ Restantes: {len(zst_files)-1}")
            
            response = input("\n¬øContinuar con el siguiente archivo? (s/N): ").strip().lower()
            if response != 's' and response != 's√≠' and response != 'si':
                print("üõë Procesamiento detenido por el usuario")
                break
        
        # Peque√±a pausa entre archivos
        if len(zst_files) > 1:  # Si hay m√°s archivos por procesar
            print("\n‚è≥ Pausa de 3 segundos antes del siguiente archivo...")
            time.sleep(3)
    
    print(f"\nüìä RESUMEN FINAL:")
    print(f"   ‚úÖ Archivos procesados: {total_processed}")
    print(f"   ‚ùå Archivos fallidos: {total_failed}")
    print("üèÅ Script terminado")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Script interrumpido por el usuario")
        print("üîÑ Los checkpoints se mantienen para reanudar despu√©s")
        sys.exit(0) 