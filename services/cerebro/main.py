#!/usr/bin/env python3
"""
Servicio Cerebro - Motor de Decisiones de Trading
================================================

Servicio principal que implementa el bucle de an√°lisis continuo
para tomar decisiones de trading basadas en indicadores t√©cnicos.

NUEVA ARQUITECTURA:
- Cerebro es PROACTIVO: notifica al Grid cuando cambiar
- Grid consulta estado inicial al arrancar
- Cerebro monitorea continuamente y avisa cambios
"""

import logging
import sys
import asyncio
import httpx
from contextlib import asynccontextmanager
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
from datetime import datetime
from typing import Dict, Optional

from .core.config import (
    PARES_A_MONITOREAR, 
    INTERVALO_ANALISIS,
    LOG_LEVEL
)
from .core.decision_engine import DecisionEngine
from .routers import health_router

# ============================================================================
# CONFIGURACI√ìN DE LOGGING
# ============================================================================

logging.basicConfig(
    level=getattr(logging, LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('logs/cerebro_service.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

# ============================================================================
# INSTANCIA GLOBAL DEL MOTOR DE DECISIONES
# ============================================================================

decision_engine = DecisionEngine()

# Variables de control del bucle
bucle_activo = False
task_bucle = None

# Tracking de decisiones anteriores para detectar cambios
decisiones_anteriores: Dict[str, str] = {}

# Estado de inicializaci√≥n - el cerebro espera en standby
grid_conectado_primera_vez = False

# Configuraci√≥n del servicio Grid
GRID_SERVICE_URL = "http://localhost:8001"  # Puerto del servicio Grid

# ============================================================================
# COMUNICACI√ìN CON GRID SERVICE
# ============================================================================

async def notificar_grid(par: str, decision: str, razon: str):
    """
    Notifica al servicio Grid sobre un cambio de decisi√≥n.
    
    Args:
        par: Par de trading
        decision: Nueva decisi√≥n (OPERAR_GRID/PAUSAR_GRID)
        razon: Raz√≥n de la decisi√≥n
    """
    try:
        async with httpx.AsyncClient() as client:
            payload = {
                "par": par,
                "decision": decision,
                "razon": razon,
                "timestamp": datetime.now().isoformat(),
                "fuente": "cerebro"
            }
            
            response = await client.post(
                f"{GRID_SERVICE_URL}/cerebro/decision",
                json=payload,
                timeout=10.0
            )
            
            if response.status_code == 200:
                logger.info(f"‚úÖ Grid notificado: {par} -> {decision}")
            else:
                logger.warning(f"‚ö†Ô∏è Error notificando Grid: {response.status_code}")
                
    except Exception as e:
        logger.error(f"‚ùå Error comunic√°ndose con Grid: {e}")
        # No falla el proceso principal si Grid no est√° disponible

# ============================================================================
# BUCLE PRINCIPAL DE AN√ÅLISIS
# ============================================================================

async def bucle_principal_analisis():
    """
    Bucle principal que ejecuta el an√°lisis continuo de los pares monitoreados.
    
    NUEVA L√ìGICA:
    1. Analiza cada par seg√∫n umbrales configurados
    2. Compara con decisi√≥n anterior
    3. Si hay cambio, notifica al Grid autom√°ticamente
    4. Actualiza base de datos
    """
    global bucle_activo, decisiones_anteriores
    
    logger.info("üöÄ ========== INICIANDO BUCLE PRINCIPAL DE AN√ÅLISIS ==========")
    logger.info(f"üìä Pares a monitorear: {PARES_A_MONITOREAR}")
    logger.info(f"‚è∞ Intervalo de an√°lisis: {INTERVALO_ANALISIS} segundos")
    logger.info(f"üîó URL Grid Service: {GRID_SERVICE_URL}")
    logger.info("=" * 70)
    
    ciclo_numero = 0
    
    while bucle_activo:
        try:
            ciclo_numero += 1
            logger.info(f"üîÑ ========== INICIANDO CICLO #{ciclo_numero} ==========")
            logger.info(f"üïê Timestamp: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            
            # Iterar sobre cada par a monitorear
            for par in PARES_A_MONITOREAR:
                if not bucle_activo:  # Verificar si se debe detener
                    break
                
                try:
                    logger.info(f"üîç Analizando {par}...")
                    
                    # Ejecutar an√°lisis para este par
                    resultado = decision_engine.analizar_par(par)
                    
                    if resultado.get('success', False):
                        decision_actual = resultado['decision']
                        razon = resultado['razon']
                        indicadores = resultado['indicadores']
                        
                        logger.info(f"‚úÖ {par}: {decision_actual}")
                        logger.info(f"üìù Raz√≥n: {razon}")
                        logger.info(f"üìä ADX: {indicadores['adx_actual']:.2f}, Volatilidad: {indicadores['volatilidad_actual']:.4f}")
                        
                        # NUEVA L√ìGICA: Detectar cambios y notificar Grid
                        decision_anterior = decisiones_anteriores.get(par)
                        
                        if decision_anterior is None:
                            # Primera vez - siempre notificar
                            logger.info(f"üÜï Primera decisi√≥n para {par}: {decision_actual}")
                            await notificar_grid(par, decision_actual, razon)
                            decisiones_anteriores[par] = decision_actual
                            
                        elif decision_anterior != decision_actual:
                            # Cambio detectado - notificar Grid
                            logger.info(f"üîÑ CAMBIO DETECTADO en {par}: {decision_anterior} -> {decision_actual}")
                            await notificar_grid(par, decision_actual, razon)
                            decisiones_anteriores[par] = decision_actual
                            
                        else:
                            # Sin cambios - solo log
                            logger.info(f"‚û°Ô∏è {par}: Sin cambios ({decision_actual})")
                        
                        if decision_actual == "OPERAR_GRID":
                            logger.info(f"üü¢ {par}: Condiciones favorables para Grid Trading")
                        else:
                            logger.info(f"üî¥ {par}: Pausar Grid Trading")
                            
                    else:
                        logger.error(f"‚ùå Error en an√°lisis de {par}: {resultado.get('error', 'Error desconocido')}")
                    
                    logger.info(f"üíæ Estado actualizado en base de datos para {par}")
                    
                except Exception as e:
                    logger.error(f"üí• Error analizando {par}: {str(e)}")
                    logger.info(f"‚è≠Ô∏è Continuando con el siguiente par...")
                    continue
            
            logger.info(f"‚úÖ ========== CICLO #{ciclo_numero} COMPLETADO ==========")
            
            if bucle_activo:
                logger.info(f"‚è≥ Esperando {INTERVALO_ANALISIS} segundos hasta el pr√≥ximo ciclo...")
                await asyncio.sleep(INTERVALO_ANALISIS)
            
        except Exception as e:
            logger.error(f"üí• Error cr√≠tico en bucle principal: {str(e)}")
            logger.info("üîÑ Reintentando en 60 segundos...")
            if bucle_activo:
                await asyncio.sleep(60)

def iniciar_bucle_analisis():
    """Inicia el bucle de an√°lisis en segundo plano."""
    global bucle_activo, task_bucle
    
    if not bucle_activo:
        bucle_activo = True
        task_bucle = asyncio.create_task(bucle_principal_analisis())
        logger.info("üöÄ Bucle de an√°lisis iniciado")
    else:
        logger.warning("‚ö†Ô∏è El bucle de an√°lisis ya est√° activo")

def detener_bucle_analisis():
    """Detiene el bucle de an√°lisis."""
    global bucle_activo, task_bucle
    
    if bucle_activo:
        bucle_activo = False
        if task_bucle:
            task_bucle.cancel()
        logger.info("üõë Bucle de an√°lisis detenido")
    else:
        logger.warning("‚ö†Ô∏è El bucle de an√°lisis no est√° activo")

# ============================================================================
# LIFECYCLE MANAGER
# ============================================================================

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Manager del ciclo de vida de la aplicaci√≥n."""
    # Startup
    try:
        logger.info("üéØ ========== INICIANDO SERVICIO CEREBRO ==========")
        logger.info("üß† Servicio Cerebro - Motor de Decisiones (Arquitectura Proactiva)")
        logger.info("üìã Configuraci√≥n:")
        logger.info(f"   üìä Pares monitoreados: {len(PARES_A_MONITOREAR)}")
        logger.info(f"   ‚è∞ Intervalo: {INTERVALO_ANALISIS}s")
        logger.info(f"   üìÅ Log level: {LOG_LEVEL}")
        logger.info(f"   üîó Grid Service: {GRID_SERVICE_URL}")
        logger.info("‚è∏Ô∏è MODO STANDBY: Esperando primera conexi√≥n del Grid...")
        
        # NO iniciar bucle autom√°ticamente - esperar a Grid
        logger.info("‚úÖ Servicio Cerebro iniciado en modo standby")
        
    except Exception as e:
        logger.error(f"‚ùå Error al iniciar Servicio Cerebro: {e}")
        raise
    
    yield
    
    # Shutdown
    try:
        logger.info("üõë Deteniendo Servicio Cerebro...")
        detener_bucle_analisis()
        logger.info("‚úÖ Servicio Cerebro detenido correctamente")
    except Exception as e:
        logger.error(f"‚ùå Error al detener Servicio Cerebro: {e}")

# ============================================================================
# APLICACI√ìN FASTAPI
# ============================================================================

app = FastAPI(
    title="Servicio Cerebro - Motor de Decisiones",
    description="""
    Servicio que act√∫a como el "cerebro" del sistema de trading.
    
    ## Nueva Arquitectura Proactiva
    
    * **An√°lisis Autom√°tico**: Monitorea pares 24/7 autom√°ticamente
    * **Notificaci√≥n Proactiva**: Avisa al Grid cuando cambiar decisiones  
    * **Consulta Inicial**: Grid puede consultar estado inicial al arrancar
    * **Decisiones Basadas en ADX y Volatilidad**: L√≥gica simple y efectiva
    
    ## Endpoints Disponibles
    
    * **GET /**: Informaci√≥n del servicio
    * **GET /grid/status/{par}**: Consulta estado actual para Grid (inicial)
    * **GET /health/**: Health check del servicio
    """,
    version="3.0.0",
    contact={
        "name": "Equipo de Desarrollo",
        "email": "dev@oraculo-bot.com"
    },
    lifespan=lifespan
)

# ============================================================================
# MIDDLEWARE
# ============================================================================

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ============================================================================
# ROUTERS
# ============================================================================

app.include_router(health_router)

# ============================================================================
# ENDPOINTS PRINCIPALES
# ============================================================================

@app.get("/")
async def root():
    """
    Endpoint ra√≠z del servicio.
    
    Returns:
        Informaci√≥n b√°sica del servicio
    """
    return {
        "servicio": "Cerebro - Motor de Decisiones",
        "version": "3.0.0",
        "arquitectura": "Proactiva",
        "estado": "monitoreo_activo" if bucle_activo else "standby",
        "grid_conectado": grid_conectado_primera_vez,
        "descripcion": "Servicio de an√°lisis continuo que notifica al Grid autom√°ticamente",
        "pares_monitoreados": PARES_A_MONITOREAR,
        "intervalo_analisis": f"{INTERVALO_ANALISIS}s",
        "grid_service_url": GRID_SERVICE_URL,
        "modo": "Esperando primera conexi√≥n del Grid" if not grid_conectado_primera_vez else "Monitoreo continuo activo",
        "endpoints": {
            "health": "/health/",
            "grid_consulta": "/grid/status/{par} (usar ETH-USDT)",
            "documentacion": "/docs"
        }
    }

@app.get("/grid/status/{par}")
async def consultar_estado_inicial_grid(par: str):
    """
    Endpoint para que Grid consulte el estado inicial al arrancar.
    
    NUEVA L√ìGICA:
    - Primera vez: activa el monitoreo continuo del cerebro
    - Siguientes veces: solo devuelve estado actual
    
    Args:
        par: Par de trading en formato con guiones (ej: 'ETH-USDT')
        
    Returns:
        Estado actual del par para inicializaci√≥n del Grid
    """
    global grid_conectado_primera_vez
    
    try:
        # Normalizar par de guiones a slashes internamente
        par_normalizado = par.replace('-', '/').upper()
        
        if not grid_conectado_primera_vez:
            logger.info("üöÄ ========== PRIMERA CONEXI√ìN DEL GRID DETECTADA ==========")
            logger.info(f"üîç Grid consultando estado inicial para {par} -> {par_normalizado}")
            logger.info("üéØ Activando monitoreo continuo del cerebro...")
            
            # Marcar como conectado y activar monitoreo
            grid_conectado_primera_vez = True
            
            # Ejecutar an√°lisis inmediato
            resultado = decision_engine.analizar_par(par_normalizado)
            
            if not resultado.get('success', False):
                raise HTTPException(
                    status_code=400,
                    detail=f"Error analizando {par_normalizado}: {resultado.get('error', 'Error desconocido')}"
                )
            
            decision = resultado['decision']
            razon = resultado['razon']
            
            # Actualizar tracking de decisiones
            decisiones_anteriores[par_normalizado] = decision
            
            # Iniciar el bucle de monitoreo continuo DESPU√âS del primer an√°lisis
            logger.info("üîÑ Iniciando bucle de monitoreo continuo...")
            iniciar_bucle_analisis()
            
            response = {
                "par": par_normalizado,
                "decision": decision,
                "razon": razon,
                "timestamp": datetime.now().isoformat(),
                "puede_operar": decision == "OPERAR_GRID",
                "fuente": "cerebro_primera_conexion",
                "monitoreo_activado": True
            }
            
            logger.info(f"‚úÖ Primera conexi√≥n procesada: {par_normalizado} -> {decision}")
            logger.info("üîÑ Monitoreo continuo ACTIVADO")
            
        else:
            # Consultas posteriores - solo devolver estado actual
            logger.info(f"üîç Grid consultando estado para {par} -> {par_normalizado} (consulta posterior)")
            
            # Ejecutar an√°lisis inmediato
            resultado = decision_engine.analizar_par(par_normalizado)
            
            if not resultado.get('success', False):
                raise HTTPException(
                    status_code=400,
                    detail=f"Error analizando {par_normalizado}: {resultado.get('error', 'Error desconocido')}"
                )
            
            decision = resultado['decision']
            razon = resultado['razon']
            
            response = {
                "par": par_normalizado,
                "decision": decision,
                "razon": razon,
                "timestamp": datetime.now().isoformat(),
                "puede_operar": decision == "OPERAR_GRID",
                "fuente": "cerebro_consulta_posterior",
                "monitoreo_activado": True
            }
            
            logger.info(f"‚úÖ Estado enviado a Grid: {par_normalizado} -> {decision}")
        
        return response
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Error consultando estado inicial para {par}: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"Error interno: {str(e)}"
        )

# ============================================================================
# FUNCIONES DE CONTROL DEL SERVICIO
# ============================================================================

def start_cerebro_service():
    """
    Inicia el servicio cerebro en modo standalone.
    
    Returns:
        Instancia de la aplicaci√≥n FastAPI
    """
    logger.info("üß† Servicio Cerebro iniciado en modo standalone")
    return app

def stop_cerebro_service():
    """
    Detiene el servicio cerebro limpiamente.
    """
    logger.info("üõë Deteniendo Servicio Cerebro...")
    detener_bucle_analisis()
    logger.info("‚úÖ Servicio Cerebro detenido correctamente")

# ============================================================================
# PUNTO DE ENTRADA PRINCIPAL
# ============================================================================

if __name__ == "__main__":
    # Punto de entrada directo (sin uvicorn - eso lo maneja run_cerebro_service.py)
    try:
        start_cerebro_service()
        
        # Mantener el servicio corriendo
        import time
        logger.info("üß† Cerebro Worker ejecut√°ndose en modo standalone...")
        while True:
            time.sleep(60)  # Revisar cada minuto
            
    except KeyboardInterrupt:
        logger.info("üîÑ Interrupci√≥n manual recibida...")
        stop_cerebro_service()
    except Exception as e:
        logger.error(f"üí• Error inesperado: {e}")
        stop_cerebro_service()
        raise 