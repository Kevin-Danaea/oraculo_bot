"""
Brain Service - Motor de Decisiones de Trading
==============================================

Servicio principal que implementa el motor de decisiones de trading
siguiendo Clean Architecture y principios SOLID.
"""

import logging
import sys
import asyncio
from contextlib import asynccontextmanager
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
from datetime import datetime
from typing import Dict, Any

# Configuraci√≥n
from config import get_config, ANALYSIS_INTERVAL, SUPPORTED_PAIRS

# Casos de uso
from application.analyze_pair_use_case import AnalyzePairUseCase
from application.batch_analysis_use_case import BatchAnalysisUseCase
from application.service_lifecycle_use_case import ServiceLifecycleUseCase

# Repositorios
from infrastructure.market_data_repository import BinanceMarketDataRepository
from infrastructure.recipe_repository import InMemoryRecipeRepository
from infrastructure.decision_repository import DatabaseDecisionRepository
from infrastructure.notification_service import HTTPNotificationService
from infrastructure.brain_status_repository import FileBrainStatusRepository

# Configuraci√≥n de logging
config = get_config()
logging.basicConfig(
    level=getattr(logging, config['logging']['level']),
    format=config['logging']['format'],
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler(config['logging']['file'], encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

# ============================================================================
# INSTANCIAS GLOBALES
# ============================================================================

# Repositorios
market_data_repo = BinanceMarketDataRepository()
recipe_repo = InMemoryRecipeRepository()
decision_repo = DatabaseDecisionRepository()
notification_service = HTTPNotificationService()
status_repo = FileBrainStatusRepository(config['files']['status'])

# Casos de uso
analyze_pair_use_case = AnalyzePairUseCase(
    market_data_repo=market_data_repo,
    decision_repo=decision_repo,
    recipe_repo=recipe_repo
)

batch_analysis_use_case = BatchAnalysisUseCase(
    market_data_repo=market_data_repo,
    decision_repo=decision_repo,
    recipe_repo=recipe_repo,
    notification_service=notification_service,
    status_repo=status_repo
)

service_lifecycle_use_case = ServiceLifecycleUseCase(
    status_repo=status_repo,
    notification_service=notification_service
)

# ============================================================================
# LIFECYCLE MANAGER
# ============================================================================

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Manager del ciclo de vida de la aplicaci√≥n."""
    # Startup
    try:
        logger.info("üéØ ========== INICIANDO BRAIN SERVICE ==========")
        logger.info("üß† Brain Service - Motor de Decisiones de Trading (Clean Architecture)")
        logger.info("üìã Configuraci√≥n:")
        logger.info(f"   üìä Pares soportados: {len(SUPPORTED_PAIRS)}")
        logger.info(f"   üî¢ Pares: {', '.join(SUPPORTED_PAIRS)}")
        logger.info(f"   ‚è∞ Intervalo de an√°lisis: {ANALYSIS_INTERVAL}s")
        logger.info(f"   üìÅ Log level: {config['logging']['level']}")
        logger.info("üß† Recetas maestras cargadas para cada par")
        logger.info("üöÄ Iniciando servicio brain...")
        
        # Iniciar el servicio brain
        startup_result = await service_lifecycle_use_case.start_service()
        if startup_result['status'] == 'started':
            logger.info("‚úÖ Brain service iniciado correctamente")
        else:
            logger.warning(f"‚ö†Ô∏è Brain service: {startup_result['message']}")
        
    except Exception as e:
        logger.error(f"‚ùå Error al iniciar Brain Service: {e}")
        raise
    
    yield
    
    # Shutdown
    try:
        logger.info("üõë Deteniendo Brain Service...")
        stop_result = await service_lifecycle_use_case.stop_service()
        if stop_result['status'] == 'stopped':
            logger.info("‚úÖ Brain service detenido correctamente")
        else:
            logger.warning(f"‚ö†Ô∏è Brain service: {stop_result['message']}")
        
        # Cerrar servicios
        await notification_service.close()
        
    except Exception as e:
        logger.error(f"‚ùå Error al detener Brain Service: {e}")

# ============================================================================
# APLICACI√ìN FASTAPI
# ============================================================================

app = FastAPI(
    title="Brain Service - Motor de Decisiones de Trading",
    description="""
    Servicio que act√∫a como el "cerebro" del sistema de trading.
    
    ## Arquitectura Clean
    
    * **Dominio**: Entidades y reglas de negocio puras
    * **Aplicaci√≥n**: Casos de uso que orquestan la l√≥gica
    * **Infraestructura**: Implementaciones concretas de repositorios y servicios
    * **Independiente**: No depende de otros servicios para funcionar
    * **Escalable**: Preparado para m√∫ltiples tipos de bots
    
    ## Comunicaci√≥n
    
    * **Base de Datos**: Las decisiones se publican en la tabla `estrategia_status`
    * **Independiente**: Los bots consultan la BD para obtener decisiones
    * **Sin APIs**: No expone endpoints para an√°lisis individual
    * **Preparado para Redis**: Arquitectura lista para comunicaci√≥n en tiempo real
    
    ## An√°lisis Autom√°tico
    
    * **Frecuencia**: Cada 1 hora
    * **Modo**: An√°lisis batch de todos los pares simult√°neamente
    * **Persistencia**: Decisiones guardadas en base de datos
    * **Notificaci√≥n**: Preparado para Redis (no implementado a√∫n)
    
    ## Endpoints Disponibles
    
    * **GET /**: Informaci√≥n del servicio
    * **GET /health/**: Health check del servicio (incluye estado del brain)
    """,
    version="1.0.0",
    contact={
        "name": "Equipo de Desarrollo",
        "email": "dev@oraculo-bot.com"
    },
    lifespan=lifespan
)

# ============================================================================
# MIDDLEWARE
# ============================================================================

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ============================================================================
# ENDPOINTS PRINCIPALES
# ============================================================================

@app.get("/")
async def root():
    """
    Endpoint ra√≠z del servicio.
    
    Returns:
        Informaci√≥n b√°sica del servicio
    """
    status_result = await service_lifecycle_use_case.get_service_status()
    
    return {
        "servicio": "Brain - Motor de Decisiones de Trading",
        "version": "1.0.0",
        "arquitectura": "Clean Architecture",
        "estado": "ejecut√°ndose" if status_result.get('is_running') else "detenido",
        "descripcion": "Servicio de an√°lisis continuo independiente que toma decisiones de trading",
        "pares_soportados": SUPPORTED_PAIRS,
        "total_pares": len(SUPPORTED_PAIRS),
        "intervalo_analisis": f"{ANALYSIS_INTERVAL}s",
        "modo": "An√°lisis continuo independiente",
        "frecuencia": f"Cada {ANALYSIS_INTERVAL}s",
        "analisis_batch": "Activado - todos los pares simult√°neamente",
        "comunicacion": "Base de datos - los bots consultan estrategia_status",
        "redis_ready": "Arquitectura preparada para comunicaci√≥n en tiempo real",
        "endpoints": {
            "health": "/health/",
            "documentacion": "/docs"
        },
        "configuracion": {
            "debug": config['development']['debug'],
            "dev_mode": config['development']['dev_mode'],
            "metrics_enabled": config['monitoring']['metrics_enabled']
        }
    }

@app.get("/health/")
async def health_check():
    """
    Health check del servicio incluyendo estado del brain.
    
    Returns:
        Estado de salud del servicio y estado del brain
    """
    try:
        status_result = await service_lifecycle_use_case.get_service_status()
        
        return {
            "status": "healthy",
            "timestamp": datetime.utcnow().isoformat(),
            "service": "brain",
            "is_running": status_result.get('is_running', False),
            "analysis_task_active": status_result.get('analysis_task_active', False),
            "brain_status": status_result.get('brain_status'),
            "cycle_count": status_result.get('cycle_count', 0),
            "last_analysis_time": status_result.get('last_analysis_time'),
            "total_decisions_processed": status_result.get('total_decisions_processed', 0),
            "successful_decisions": status_result.get('successful_decisions', 0),
            "failed_decisions": status_result.get('failed_decisions', 0)
        }
    except Exception as e:
        logger.error(f"‚ùå Error en health check: {e}")
        raise HTTPException(status_code=500, detail=f"Error en health check: {str(e)}")

# ============================================================================
# FUNCI√ìN PRINCIPAL
# ============================================================================

def start_brain_service():
    """Funci√≥n para iniciar el servicio brain."""
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=8000,
        reload=config['development']['debug'],
        log_level=config['logging']['level'].lower()
    )

if __name__ == "__main__":
    start_brain_service() 