"""
Handler para comandos del sistema multibot simult√°neo.
Maneja comandos para controlar m√∫ltiples bots ejecut√°ndose al mismo tiempo.
"""

import threading
from datetime import datetime
from typing import Dict, Any

from shared.services.telegram_bot_service import TelegramBot
from shared.services.logging_config import get_logger
from services.grid.schedulers.multibot_scheduler import get_multibot_scheduler
from .base_handler import BaseHandler

logger = get_logger(__name__)

class MultibotCommandsHandler(BaseHandler):
    """Handler para comandos del sistema multibot simult√°neo"""
    
    def handle_start_multibot_command(self, chat_id: str, message_text: str, bot: TelegramBot):
        """Comando /start_multibot: Inicia todos los bots configurados simult√°neamente"""
        try:
            # Obtener configuraciones activas
            active_configs = self.get_all_user_configs(chat_id)
            configured_configs = [config for config in active_configs if getattr(config, 'is_configured', False)]
            
            if not configured_configs:
                message = "‚ö†Ô∏è <b>No hay configuraciones activas</b>\n\n"
                message += "üí° Usa /config para configurar al menos un par primero"
                bot.send_message(chat_id, message)
                return
            
            # Obtener scheduler multibot
            scheduler = get_multibot_scheduler()
            
            def start_multibot_async():
                try:
                    bot.send_message(chat_id, "üöÄ Iniciando sistema multibot simult√°neo...")
                    
                    started_bots = []
                    failed_bots = []
                    
                    for config in configured_configs:
                        try:
                            pair = config.pair
                            config_dict = config.to_dict()
                            
                            # Iniciar bot para este par
                            if scheduler.start_bot_for_pair(pair, config_dict):
                                started_bots.append(config.config_type)
                                bot.send_message(chat_id, f"‚úÖ Bot {config.config_type} iniciado")
                            else:
                                failed_bots.append(config.config_type)
                                bot.send_message(chat_id, f"‚ùå Error iniciando bot {config.config_type}")
                                
                        except Exception as e:
                            failed_bots.append(config.config_type)
                            logger.error(f"‚ùå Error iniciando bot {config.config_type}: {e}")
                            bot.send_message(chat_id, f"‚ùå Error iniciando bot {config.config_type}: {str(e)}")
                    
                    # Resumen final
                    message = "ü§ñ <b>SISTEMA MULTIBOT SIMULT√ÅNEO</b>\n\n"
                    
                    if started_bots:
                        message += f"‚úÖ <b>Bots iniciados ({len(started_bots)}):</b>\n"
                        for bot_type in started_bots:
                            message += f"‚Ä¢ {bot_type}\n"
                        message += "\n"
                    
                    if failed_bots:
                        message += f"‚ùå <b>Bots con error ({len(failed_bots)}):</b>\n"
                        for bot_type in failed_bots:
                            message += f"‚Ä¢ {bot_type}\n"
                        message += "\n"
                    
                    message += "üìä <b>Estado del sistema:</b>\n"
                    message += f"‚Ä¢ Total configurados: {len(configured_configs)}\n"
                    message += f"‚Ä¢ Ejecut√°ndose: {len(started_bots)}\n"
                    message += f"‚Ä¢ Con errores: {len(failed_bots)}\n\n"
                    
                    message += "üß† <b>Recetas maestras activas:</b>\n"
                    for config in configured_configs:
                        recipe_info = self._get_recipe_info(config.pair)
                        message += f"‚Ä¢ {config.config_type}: {recipe_info}\n"
                    
                    message += "\nüìà Usa /status_multibot para monitorear todos los bots"
                    
                    bot.send_message(chat_id, message)
                    
                except Exception as e:
                    logger.error(f"‚ùå Error en start_multibot_async: {e}")
                    bot.send_message(chat_id, f"‚ùå Error iniciando sistema multibot: {str(e)}")
            
            threading.Thread(target=start_multibot_async, daemon=True).start()
            bot.send_message(chat_id, "‚è≥ Iniciando sistema multibot...")
            
        except Exception as e:
            self.send_error_message(bot, chat_id, "start_multibot", e)
    
    def handle_stop_multibot_command(self, chat_id: str, message_text: str, bot: TelegramBot):
        """Comando /stop_multibot: Detiene todos los bots activos"""
        try:
            scheduler = get_multibot_scheduler()
            status = scheduler.get_status()
            
            if status['total_active_bots'] == 0:
                bot.send_message(chat_id, "‚ÑπÔ∏è No hay bots ejecut√°ndose actualmente")
                return
            
            def stop_multibot_async():
                try:
                    bot.send_message(chat_id, f"üõë Deteniendo {status['total_active_bots']} bots activos...")
                    
                    # Detener todos los bots
                    scheduler.stop_all_bots()
                    
                    message = "‚úÖ <b>SISTEMA MULTIBOT DETENIDO</b>\n\n"
                    message += f"üõë <b>Bots detenidos:</b> {status['total_active_bots']}\n"
                    message += "‚è∏Ô∏è Todos los bots est√°n en modo standby\n\n"
                    message += "üöÄ Usa /start_multibot para reiniciar el sistema"
                    
                    bot.send_message(chat_id, message)
                    
                except Exception as e:
                    logger.error(f"‚ùå Error en stop_multibot_async: {e}")
                    bot.send_message(chat_id, f"‚ùå Error deteniendo sistema multibot: {str(e)}")
            
            threading.Thread(target=stop_multibot_async, daemon=True).start()
            bot.send_message(chat_id, "‚è≥ Deteniendo sistema multibot...")
            
        except Exception as e:
            self.send_error_message(bot, chat_id, "stop_multibot", e)
    
    def handle_status_multibot_command(self, chat_id: str, message_text: str, bot: TelegramBot):
        """Comando /status_multibot: Muestra el estado de todos los bots"""
        try:
            # Obtener estado del scheduler
            scheduler = get_multibot_scheduler()
            scheduler_status = scheduler.get_status()
            
            # Obtener configuraciones del usuario
            all_configs = self.get_all_user_configs(chat_id)
            
            message = "ü§ñ <b>ESTADO DEL SISTEMA MULTIBOT SIMULT√ÅNEO</b>\n\n"
            
            # Estado del scheduler
            scheduler_icon = "üü¢" if scheduler_status['scheduler_running'] else "üî¥"
            message += f"{scheduler_icon} <b>Scheduler:</b> {'Activo' if scheduler_status['scheduler_running'] else 'Inactivo'}\n"
            message += f"üìä <b>Bots ejecut√°ndose:</b> {scheduler_status['total_active_bots']}\n\n"
            
            # Estado de cada configuraci√≥n
            message += "üìã <b>Estado por configuraci√≥n:</b>\n"
            
            for config in all_configs:
                config_type = config.config_type
                is_configured = getattr(config, 'is_configured', False)
                is_running = getattr(config, 'is_running', False)
                last_decision = getattr(config, 'last_decision', 'NO_DECISION')
                
                if is_configured:
                    status_icon = "üü¢" if is_running else "üî¥"
                    decision_icon = "‚úÖ" if last_decision == 'OPERAR_GRID' else "‚ùå"
                    
                    message += f"{status_icon} <b>{config_type}:</b>\n"
                    message += f"   üìä Par: {config.pair}\n"
                    message += f"   üí∞ Capital: ${config.total_capital}\n"
                    message += f"   üéØ Niveles: {config.grid_levels}\n"
                    message += f"   üìà Rango: ¬±{config.price_range_percent}%\n"
                    message += f"   üß† Decisi√≥n: {decision_icon} {last_decision}\n"
                    message += f"   ü§ñ Estado: {'Ejecut√°ndose' if is_running else 'Detenido'}\n\n"
                else:
                    message += f"‚ö™ <b>{config_type}:</b> Sin configurar\n\n"
            
            # Informaci√≥n de recetas maestras
            message += "üß† <b>Recetas Maestras:</b>\n"
            message += "‚Ä¢ ETH: ADX < 30, Bollinger > 0.025, Rango 10%\n"
            message += "‚Ä¢ BTC: ADX < 25, Bollinger > 0.035, Rango 7.5%\n"
            message += "‚Ä¢ AVAX: ADX < 35, Bollinger > 0.020, Rango 10%\n\n"
            
            # Comandos disponibles
            message += "üîß <b>Comandos disponibles:</b>\n"
            message += "/start_multibot - Iniciar todos los bots\n"
            message += "/stop_multibot - Detener todos los bots\n"
            message += "/config - Configurar bots\n"
            message += "/balance_multibot - Ver balance de todos los pares\n"
            
            bot.send_message(chat_id, message)
            
        except Exception as e:
            self.send_error_message(bot, chat_id, "status_multibot", e)
    
    def handle_balance_multibot_command(self, chat_id: str, message_text: str, bot: TelegramBot):
        """Comando /balance_multibot: Muestra el balance de todos los pares configurados"""
        try:
            # Obtener configuraciones activas
            active_configs = self.get_all_user_configs(chat_id)
            configured_configs = [config for config in active_configs if getattr(config, 'is_configured', False)]
            
            if not configured_configs:
                bot.send_message(chat_id, "‚ö†Ô∏è No hay configuraciones activas. Usa /config primero.")
                return
            
            def get_balance_multibot_async():
                try:
                    bot.send_message(chat_id, "‚è≥ Obteniendo balances de todos los pares...")
                    
                    from services.grid.core.cerebro_integration import MODO_PRODUCTIVO
                    from services.grid.core.config_manager import get_exchange_connection
                    from shared.services.telegram_service import get_current_balance, calculate_pnl_with_explanation
                    
                    exchange = get_exchange_connection()
                    modo_info = "üü¢ PRODUCTIVO" if MODO_PRODUCTIVO else "üü° SANDBOX"
                    
                    message = f"üí∞ <b>BALANCE MULTIBOT SIMULT√ÅNEO</b>\n\n{modo_info}\n\n"
                    
                    total_pnl = 0.0
                    total_initial_capital = 0.0
                    
                    for config in configured_configs:
                        try:
                            pair = config.pair
                            initial_capital = config.total_capital
                            
                            # Obtener balance actual
                            balance = get_current_balance(exchange, pair)
                            
                            # Calcular P&L
                            mode = "PRODUCTIVO" if MODO_PRODUCTIVO else "SANDBOX"
                            pnl_data = calculate_pnl_with_explanation(balance, initial_capital, mode)
                            
                            message += f"üìä <b>{config.config_type}:</b>\n"
                            message += f"   üíµ USDT: ${balance['usdt']:.2f}\n"
                            message += f"   ü™ô {balance['crypto_symbol']}: {balance['crypto']:.6f}\n"
                            message += f"   üíé Valor: ${balance['crypto_value']:.2f}\n"
                            message += f"   üìä Total: ${balance['total_value']:.2f}\n"
                            message += f"   {pnl_data['pnl_icon']} P&L: ${pnl_data['total_pnl']:.2f} ({pnl_data['total_pnl_percentage']:.2f}%)\n\n"
                            
                            total_pnl += pnl_data['total_pnl']
                            total_initial_capital += initial_capital
                            
                        except Exception as e:
                            message += f"‚ùå <b>{config.config_type}:</b> Error obteniendo balance\n\n"
                            logger.error(f"‚ùå Error obteniendo balance para {config.config_type}: {e}")
                    
                    # Resumen total
                    if total_initial_capital > 0:
                        total_pnl_percentage = (total_pnl / total_initial_capital) * 100
                        total_pnl_icon = "üìà" if total_pnl >= 0 else "üìâ"
                        
                        message += f"üìä <b>RESUMEN TOTAL:</b>\n"
                        message += f"   üí∞ Capital inicial: ${total_initial_capital:.2f}\n"
                        message += f"   {total_pnl_icon} P&L total: ${total_pnl:.2f} ({total_pnl_percentage:.2f}%)\n"
                        message += f"   üìä Pares activos: {len(configured_configs)}\n\n"
                    
                    message += f"‚è∞ <i>{datetime.now().strftime('%H:%M:%S %d/%m/%Y')}</i>"
                    
                    bot.send_message(chat_id, message)
                    
                except Exception as e:
                    logger.error(f"‚ùå Error en get_balance_multibot_async: {e}")
                    bot.send_message(chat_id, f"‚ùå Error obteniendo balances: {str(e)}")
            
            threading.Thread(target=get_balance_multibot_async, daemon=True).start()
            
        except Exception as e:
            self.send_error_message(bot, chat_id, "balance_multibot", e)
    
    def _get_recipe_info(self, pair: str) -> str:
        """Obtiene informaci√≥n de la receta maestra para un par"""
        recipes = {
            'ETH/USDT': 'ADX < 30, Bollinger > 0.025, Rango 10%',
            'BTC/USDT': 'ADX < 25, Bollinger > 0.035, Rango 7.5%',
            'AVAX/USDT': 'ADX < 35, Bollinger > 0.020, Rango 10%'
        }
        return recipes.get(pair, 'Receta no definida') 