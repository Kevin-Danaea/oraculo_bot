"""
Handler para comandos b√°sicos del Grid Bot.
Maneja comandos como start, status, delete_config, etc.
"""
import threading
import time
from datetime import datetime

from shared.services.telegram_bot_service import TelegramBot
from shared.services.logging_config import get_logger
from services.grid.schedulers.grid_scheduler import (
    get_grid_scheduler,
    start_grid_bot_scheduler, 
    stop_grid_bot_scheduler,
    start_grid_bot_manual,
    stop_grid_bot_manual,
    get_grid_bot_status
)
from .base_handler import BaseHandler

logger = get_logger(__name__)


class BasicCommandsHandler(BaseHandler):
    """Handler para comandos b√°sicos del Grid Bot"""
    
    def handle_start_command(self, chat_id: str, message_text: str, bot: TelegramBot):
        """Maneja el comando /start"""
        try:
            # Limpiar estados de conversaci√≥n
            bot.clear_conversation_state(chat_id)
            
            message = """
ü§ñ **GRID BOT V3.0 - MODO AUT√ìNOMO**

üß† **Nueva Arquitectura Inteligente:**
‚Ä¢ El Grid responde autom√°ticamente a las decisiones del Cerebro
‚Ä¢ Monitoreo continuo cada 10 minutos
‚Ä¢ Activaci√≥n/desactivaci√≥n autom√°tica seg√∫n condiciones del mercado

üì± **Comandos Disponibles:**

**Configuraci√≥n:**
‚Ä¢ /config - Configurar par√°metros del bot
‚Ä¢ /info_config - Ver configuraci√≥n actual
‚Ä¢ /delete_config - Eliminar configuraci√≥n

**Control Manual:**
‚Ä¢ /start_bot - Iniciar trading manualmente (consulta al cerebro)
‚Ä¢ /stop_bot - Detener trading manualmente
‚Ä¢ /restart_bot - Reiniciar bot
‚Ä¢ /status - Estado actual del sistema

**Modo de Trading:**
‚Ä¢ /modo_productivo - Cambiar a trading real
‚Ä¢ /modo_sandbox - Cambiar a paper trading
‚Ä¢ /modo_actual - Ver modo actual

**Informaci√≥n del Cerebro:**
‚Ä¢ /estado_cerebro - Ver an√°lisis detallado del cerebro

üîÑ **Funcionamiento Aut√≥nomo:**
‚Ä¢ El Cerebro analiza el mercado cada 2 horas
‚Ä¢ Si autoriza trading ‚Üí Grid se activa autom√°ticamente
‚Ä¢ Si recomienda pausar ‚Üí Grid se detiene autom√°ticamente
‚Ä¢ Notificaciones autom√°ticas por Telegram

üí° **Uso Recomendado:**
1. Configura con /config
2. El sistema funciona autom√°ticamente
3. Usa /status para monitorear
4. Interviene solo si necesitas cambiar estrategia
"""
            
            # Verificar estado actual y modo
            from services.grid.main import obtener_configuracion_trading
            trading_config = obtener_configuracion_trading()
            modo_icon = "üü°" if trading_config['modo'] == 'SANDBOX' else "üü¢"
            
            scheduler = get_grid_scheduler()
            if scheduler and scheduler.running:
                message += "üü¢ <b>Estado Bot:</b> Ejecut√°ndose\n"
            else:
                message += "üî¥ <b>Estado Bot:</b> Detenido\n"
            
            message += f"{modo_icon} <b>Modo Trading:</b> {trading_config['modo']}\n"
            
            # Verificar si tiene configuraci√≥n guardada
            user_config = self.get_user_config(chat_id)
            if user_config:
                message += f"‚öôÔ∏è <b>Configuraci√≥n:</b> {user_config.pair} con ${user_config.total_capital}\n"
            else:
                message += "‚öôÔ∏è <b>Configuraci√≥n:</b> No configurado\n"
            
            message += "\nüìã <b>Comandos principales:</b>\n"
            message += "/config - Configurar bot (solo par + capital)\n"
            message += "/start_bot - Iniciar trading inteligente\n"
            message += "/stop_bot - Detener bot\n"
            message += "/status - Estado completo (bot + cerebro)\n\n"
            message += "üîÑ <b>Control de modo trading:</b>\n"
            message += "/modo_productivo - Cambiar a dinero real ‚ö†Ô∏è\n"
            message += "/modo_sandbox - Cambiar a simulaci√≥n ‚úÖ\n"
            message += "/modo_actual - Ver modo activo\n\n"
            message += "üß† <b>Estado del cerebro:</b>\n"
            message += "/estado_cerebro - Ver an√°lisis del cerebro\n\n"
            message += "üõ°Ô∏è <b>Protecciones:</b>\n"
            message += "/protections - Ver estado stop-loss\n"
            message += "/set_stop_loss X - Configurar % stop-loss\n\n"
            message += "üìä <b>Informaci√≥n:</b>\n"
            message += "/info_config - Info sobre configuraci√≥n optimizada\n"
            
            bot.send_message(chat_id, message)
            
        except Exception as e:
            self.send_error_message(bot, chat_id, "comando start", e)
    
    def handle_start_bot_command(self, chat_id: str, message_text: str, bot: TelegramBot):
        """Maneja el comando /start_bot - V2 con modo manual"""
        try:
            # Verificar configuraci√≥n
            user_config = self.get_user_config(chat_id)
            if not user_config:
                message = "‚ö†Ô∏è <b>No tienes configuraci√≥n guardada</b>\n\n"
                message += "Usa /config para configurar el bot primero."
                bot.send_message(chat_id, message)
                return
            
            # Verificar estado del bot
            bot_status = get_grid_bot_status()
            if bot_status['bot_running']:
                bot.send_message(chat_id, "‚ö†Ô∏è El bot ya est√° ejecut√°ndose. Usa /stop_bot para detenerlo primero.")
                return
            
            if not bot_status['ready_to_start']:
                message = "‚ö†Ô∏è <b>Servicio no est√° listo</b>\n\n"
                message += "El scheduler no est√° activo. Contacta al administrador."
                bot.send_message(chat_id, message)
                return
            
            # Iniciar bot manualmente
            def start_bot_async():
                try:
                    # PRIMERO: Consultar estado del cerebro
                    bot.send_message(chat_id, "üß† Consultando estado del Cerebro...")
                    
                    try:
                        from services.grid.main import consultar_estado_inicial_cerebro
                        import asyncio
                        
                        # Crear event loop para la consulta as√≠ncrona
                        loop = asyncio.new_event_loop()
                        asyncio.set_event_loop(loop)
                        
                        try:
                            # Consultar al cerebro
                            resultado_cerebro = loop.run_until_complete(consultar_estado_inicial_cerebro())
                            
                            # Verificar que resultado_cerebro sea un diccionario
                            if isinstance(resultado_cerebro, dict):
                                # Analizar respuesta del cerebro
                                if resultado_cerebro.get('puede_operar', False):
                                    decision_cerebro = "üü¢ OPERAR_GRID"
                                    mensaje_cerebro = "‚úÖ El Cerebro autoriza el trading"
                                else:
                                    decision_cerebro = "üî¥ PAUSAR_GRID"
                                    mensaje_cerebro = "‚ö†Ô∏è El Cerebro recomienda pausar el trading"
                                
                                # Mostrar resultado del cerebro
                                bot.send_message(
                                    chat_id, 
                                    f"üß† <b>Estado del Cerebro:</b>\n"
                                    f"‚Ä¢ Decisi√≥n: {decision_cerebro}\n"
                                    f"‚Ä¢ Raz√≥n: {resultado_cerebro.get('razon', 'No disponible')}\n"
                                    f"‚Ä¢ {mensaje_cerebro}"
                                )
                                
                                # Si el cerebro dice PAUSAR, preguntar si continuar
                                if not resultado_cerebro.get('puede_operar', False):
                                    bot.send_message(
                                        chat_id,
                                        "‚ö†Ô∏è <b>El Cerebro recomienda pausar el trading</b>\n\n"
                                        "¬øDeseas continuar de todas formas?\n"
                                        "Responde 'SI' para continuar o 'NO' para cancelar."
                                    )
                                    # Aqu√≠ podr√≠as implementar un sistema de confirmaci√≥n
                                    # Por ahora, continuamos con advertencia
                                    bot.send_message(chat_id, "‚ö†Ô∏è Continuando con advertencia...")
                            else:
                                bot.send_message(
                                    chat_id,
                                    f"‚ö†Ô∏è <b>Respuesta inesperada del Cerebro:</b> {resultado_cerebro}\n"
                                    f"Continuando en modo standalone..."
                                )
                            
                        finally:
                            loop.close()
                            
                    except Exception as e:
                        bot.send_message(
                            chat_id,
                            f"‚ö†Ô∏è <b>No se pudo consultar al Cerebro:</b> {str(e)}\n"
                            f"Continuando en modo standalone..."
                        )
                    
                    # SEGUNDO: Iniciar el grid bot
                    bot.send_message(chat_id, "üöÄ Iniciando Grid Bot...")
                    success, result_message = start_grid_bot_manual()
                    
                    if success:
                        message = f"üöÄ <b>¬°Grid Bot iniciado exitosamente!</b>\n\n"
                        message += f"üìä <b>Trading:</b> {user_config.pair}\n"
                        message += f"üí∞ <b>Capital:</b> ${user_config.total_capital} USDT\n"
                        message += f"üéöÔ∏è <b>Niveles:</b> {user_config.grid_levels}\n"
                        message += f"üìä <b>Rango:</b> ¬±{user_config.price_range_percent}%\n\n"
                        message += f"üõ°Ô∏è <b>Protecciones V2:</b>\n"
                        message += f"‚Ä¢ Stop-Loss: {'‚úÖ' if getattr(user_config, 'enable_stop_loss', True) else '‚ùå'} ({getattr(user_config, 'stop_loss_percent', 5.0)}%)\n"
                        message += f"‚Ä¢ Trailing Up: {'‚úÖ' if getattr(user_config, 'enable_trailing_up', True) else '‚ùå'}\n\n"
                        message += f"üìà Usa /status para monitorear el progreso."
                        bot.send_message(chat_id, message)
                    else:
                        bot.send_message(chat_id, f"‚ùå <b>Error iniciando bot:</b> {result_message}")
                        
                except Exception as e:
                    self.send_error_message(bot, chat_id, "start_bot_async", e)
            
            threading.Thread(target=start_bot_async, daemon=True).start()
            bot.send_message(chat_id, "‚è≥ Iniciando Grid Bot...")
            
        except Exception as e:
            self.send_error_message(bot, chat_id, "start_bot", e)
    
    def handle_stop_bot_command(self, chat_id: str, message_text: str, bot: TelegramBot):
        """Maneja el comando /stop_bot - V2 con modo manual"""
        try:
            # Verificar estado del bot
            bot_status = get_grid_bot_status()
            if not bot_status['bot_running']:
                bot.send_message(chat_id, "‚ÑπÔ∏è El bot ya est√° detenido (modo standby).")
                return
            
            if not bot_status['ready_to_stop']:
                message = "‚ö†Ô∏è <b>No se puede detener el bot</b>\n\n"
                message += "El bot no est√° en un estado v√°lido para detener."
                bot.send_message(chat_id, message)
                return
            
            def stop_bot_async():
                try:
                    success, result_message = stop_grid_bot_manual()
                    
                    if success:
                        message = "üõë <b>Grid Bot detenido correctamente</b>\n\n"
                        message += "‚úÖ Se se√±al√≥ la parada del bot\n"
                        message += "üßπ Las √≥rdenes ser√°n canceladas autom√°ticamente\n"
                        message += "‚è∏Ô∏è Bot entrando en modo standby\n\n"
                        message += "‚ÑπÔ∏è <i>El proceso de cancelaci√≥n puede tomar unos segundos</i>\n"
                        message += "‚ñ∂Ô∏è Usa /start_bot para reanudar trading"
                        bot.send_message(chat_id, message)
                    else:
                        bot.send_message(chat_id, f"‚ùå <b>Error deteniendo bot:</b> {result_message}")
                        
                except Exception as e:
                    self.send_error_message(bot, chat_id, "stop_bot_async", e)
            
            threading.Thread(target=stop_bot_async, daemon=True).start()
            bot.send_message(chat_id, "‚è≥ Deteniendo Grid Bot...")
            
        except Exception as e:
            self.send_error_message(bot, chat_id, "stop_bot", e)
    
    def handle_restart_bot_command(self, chat_id: str, message_text: str, bot: TelegramBot):
        """Maneja el comando /restart_bot"""
        try:
            def restart_bot_async():
                try:
                    # Detener si est√° ejecut√°ndose
                    scheduler = get_grid_scheduler()
                    if scheduler and scheduler.running:
                        bot.send_message(chat_id, "üõë Deteniendo bot actual...")
                        stop_grid_bot_scheduler()
                        time.sleep(3)  # Esperar un poco
                    
                    # Iniciar de nuevo
                    bot.send_message(chat_id, "üöÄ Reiniciando bot...")
                    start_grid_bot_scheduler()
                    
                    user_config = self.get_user_config(chat_id)
                    bot.send_message(
                        chat_id,
                        f"‚úÖ <b>Bot reiniciado correctamente</b>\n\n"
                        f"üìä Trading: {user_config.pair if user_config else 'N/A'}\n"
                        f"Usa /status para verificar el estado."
                    )
                    
                except Exception as e:
                    self.send_error_message(bot, chat_id, "reiniciando bot", e)
            
            threading.Thread(target=restart_bot_async, daemon=True).start()
            bot.send_message(chat_id, "üîÑ Reiniciando Grid Bot...")
            
        except Exception as e:
            self.send_error_message(bot, chat_id, "restart_bot", e)
    
    def handle_status_command(self, chat_id: str, message_text: str, bot: TelegramBot):
        """
        Comando /status: Muestra estado del grid bot con integraci√≥n Cerebro
        """
        try:
            # Obtener configuraci√≥n del usuario
            user_config = self.get_user_config(chat_id)
            
            # Obtener estado del scheduler
            scheduler = get_grid_scheduler()
            is_running = scheduler.running if scheduler else False
            
            # Obtener estado del cerebro y modo de trading
            try:
                from services.grid.main import estado_cerebro, obtener_configuracion_trading
                cerebro_estado = estado_cerebro
                config_trading = obtener_configuracion_trading()
            except ImportError:
                cerebro_estado = {"decision": "No disponible", "fuente": "error"}
                config_trading = {"modo": "No disponible"}
            
            # Crear mensaje de estado completo
            if user_config:
                status_message = f"""
ü§ñ **ESTADO DEL GRID BOT**

üìä **Configuraci√≥n Activa:**
‚Ä¢ Par: {user_config.pair}
‚Ä¢ Capital: ${user_config.total_capital:,.2f}
‚Ä¢ Niveles: {user_config.grid_levels}
‚Ä¢ Rango: {user_config.price_range_percent}%

üîÑ **Estado del Sistema:**
‚Ä¢ Scheduler: {'üü¢ Activo' if is_running else 'üî¥ Inactivo'}
‚Ä¢ Modo Trading: {config_trading.get('modo', 'No disponible')}
‚Ä¢ **Modo Operaci√≥n: üß† AUT√ìNOMO** (Responde a decisiones del Cerebro)

üß† **Estado del Cerebro:**
‚Ä¢ Decisi√≥n: {cerebro_estado.get('decision', 'No disponible')}
‚Ä¢ Fuente: {cerebro_estado.get('fuente', 'No disponible')}
‚Ä¢ √öltima actualizaci√≥n: {cerebro_estado.get('ultima_actualizacion', 'No disponible')}

‚ö° **Protecciones Avanzadas:**
‚Ä¢ Stop Loss: {'üü¢ Activo' if getattr(user_config, 'enable_stop_loss', False) else 'üî¥ Inactivo'}
‚Ä¢ Trailing Up: {'üü¢ Activo' if getattr(user_config, 'enable_trailing_up', False) else 'üî¥ Inactivo'}
"""
                
                if hasattr(user_config, 'enable_stop_loss') and getattr(user_config, 'enable_stop_loss', False):
                    status_message += f"‚Ä¢ Stop Loss %: {getattr(user_config, 'stop_loss_percent', 5.0)}%\n"
            else:
                status_message = f"""
ü§ñ **ESTADO DEL GRID BOT**

‚ö†Ô∏è **Sin configuraci√≥n activa**
Usa /config para configurar el bot

üîÑ **Estado del Sistema:**
‚Ä¢ Scheduler: {'üü¢ Activo' if is_running else 'üî¥ Inactivo'}
‚Ä¢ Modo Trading: {config_trading.get('modo', 'No disponible')}
‚Ä¢ **Modo Operaci√≥n: üß† AUT√ìNOMO** (Responde a decisiones del Cerebro)

üß† **Estado del Cerebro:**
‚Ä¢ Decisi√≥n: {cerebro_estado.get('decision', 'No disponible')}
‚Ä¢ Fuente: {cerebro_estado.get('fuente', 'No disponible')}
‚Ä¢ √öltima actualizaci√≥n: {cerebro_estado.get('ultima_actualizacion', 'No disponible')}
"""
            
            # Agregar comandos disponibles
            status_message += """

üìù **Comandos Nuevos:**
‚Ä¢ /modo_productivo - Cambiar a trading real
‚Ä¢ /modo_sandbox - Cambiar a paper trading
‚Ä¢ /estado_cerebro - Ver estado detallado del cerebro
‚Ä¢ /modo_actual - Ver modo de trading actual
"""
            
            bot.send_message(chat_id, status_message)
            logger.info(f"‚úÖ Estado enviado a chat {chat_id}")
            
        except Exception as e:
            error_message = f"‚ùå Error al obtener el estado: {str(e)}"
            bot.send_message(chat_id, error_message)
            logger.error(f"‚ùå Error en handle_status_command: {e}")

    def handle_delete_config_command(self, chat_id: str, message_text: str, bot: TelegramBot):
        """Maneja el comando /delete_config"""
        try:
            user_config = self.get_user_config(chat_id)
            
            if not user_config:
                bot.send_message(chat_id, "‚ÑπÔ∏è No tienes configuraci√≥n guardada.")
                return
            
            # Desactivar configuraci√≥n en la base de datos
            if self.update_user_config(chat_id, {'is_active': False}):
                bot.send_message(
                    chat_id, 
                    f"‚úÖ Configuraci√≥n eliminada correctamente.\n\n"
                    f"Se elimin√≥: {user_config.pair} con ${user_config.total_capital} USDT"
                )
            else:
                bot.send_message(chat_id, "‚ùå Error eliminando configuraci√≥n")
            
        except Exception as e:
            self.send_error_message(bot, chat_id, "eliminando config", e)

    def handle_modo_productivo_command(self, chat_id: str, message_text: str, bot):
        """
        Comando /modo_productivo: Cambia a modo productivo (trading real)
        """
        try:
            from services.grid.main import MODO_PRODUCTIVO, alternar_modo_trading, obtener_configuracion_trading
            from services.grid.schedulers.grid_scheduler import get_grid_bot_status, stop_grid_bot_manual, start_grid_bot_manual

            bot_status = get_grid_bot_status()
            if MODO_PRODUCTIVO:
                config = obtener_configuracion_trading()
                message = f"""
üü¢ **YA EN MODO PRODUCTIVO**

‚Ä¢ Modo actual: {config['modo']}
‚Ä¢ Descripci√≥n: {config['descripcion']}
‚Ä¢ Estado: Activo

‚ö†Ô∏è **ADVERTENCIA**: Trading con dinero real
"""
                bot.send_message(chat_id, message)
                return

            # Si el bot est√° corriendo, detenerlo y cancelar √≥rdenes
            if bot_status['bot_running']:
                bot.send_message(chat_id, "üõë Deteniendo Grid Bot y cancelando √≥rdenes por cambio de modo...")
                success, msg = stop_grid_bot_manual()
                if success:
                    bot.send_message(chat_id, "‚úÖ Grid Bot detenido y √≥rdenes canceladas correctamente.")
                else:
                    bot.send_message(chat_id, f"‚ö†Ô∏è Hubo un problema al detener el bot: {msg}")

            # Cambiar a modo productivo
            config = alternar_modo_trading()
            message = f"""
üü¢ **CAMBIADO A MODO PRODUCTIVO**

‚Ä¢ Nuevo modo: {config['modo']}
‚Ä¢ Descripci√≥n: {config['descripcion']}

‚ö†Ô∏è **ADVERTENCIA IMPORTANTE**:
Ahora est√°s operando con DINERO REAL en Binance.
Todas las operaciones afectar√°n tu cuenta real.

üîÑ Usa /modo_sandbox para volver a paper trading
"""
            bot.send_message(chat_id, message)
            logger.info(f"‚úÖ Comando modo_productivo ejecutado para chat {chat_id}")

            # Reiniciar el bot autom√°ticamente en el nuevo modo
            bot.send_message(chat_id, "üöÄ Reiniciando Grid Bot en modo PRODUCTIVO...")
            success, msg = start_grid_bot_manual()
            if success:
                bot.send_message(chat_id, "‚úÖ Grid Bot iniciado en modo PRODUCTIVO.")
            else:
                bot.send_message(chat_id, f"‚ö†Ô∏è No se pudo iniciar el bot autom√°ticamente: {msg}")

        except Exception as e:
            error_message = f"‚ùå Error al cambiar a modo productivo: {str(e)}"
            bot.send_message(chat_id, error_message)
            logger.error(f"‚ùå Error en handle_modo_productivo_command: {e}")

    def handle_modo_sandbox_command(self, chat_id: str, message_text: str, bot):
        """
        Comando /modo_sandbox: Cambia a modo sandbox (paper trading)
        """
        try:
            from services.grid.main import MODO_PRODUCTIVO, alternar_modo_trading, obtener_configuracion_trading
            from services.grid.schedulers.grid_scheduler import get_grid_bot_status, stop_grid_bot_manual, start_grid_bot_manual

            bot_status = get_grid_bot_status()
            if not MODO_PRODUCTIVO:
                config = obtener_configuracion_trading()
                message = f"""
üü° **YA EN MODO SANDBOX**

‚Ä¢ Modo actual: {config['modo']}
‚Ä¢ Descripci√≥n: {config['descripcion']}
‚Ä¢ Estado: Activo

‚úÖ **SEGURO**: Paper trading sin riesgo
"""
                bot.send_message(chat_id, message)
                return

            # Si el bot est√° corriendo, detenerlo y cancelar √≥rdenes
            if bot_status['bot_running']:
                bot.send_message(chat_id, "üõë Deteniendo Grid Bot y cancelando √≥rdenes por cambio de modo...")
                success, msg = stop_grid_bot_manual()
                if success:
                    bot.send_message(chat_id, "‚úÖ Grid Bot detenido y √≥rdenes canceladas correctamente.")
                else:
                    bot.send_message(chat_id, f"‚ö†Ô∏è Hubo un problema al detener el bot: {msg}")

            # Cambiar a modo sandbox
            config = alternar_modo_trading()
            message = f"""
üü° **CAMBIADO A MODO SANDBOX**

‚Ä¢ Nuevo modo: {config['modo']}
‚Ä¢ Descripci√≥n: {config['descripcion']}

‚úÖ **MODO SEGURO ACTIVADO**:
Todas las operaciones son simuladas.
No se usa dinero real.

üîÑ Usa /modo_productivo para trading real
"""
            bot.send_message(chat_id, message)
            logger.info(f"‚úÖ Comando modo_sandbox ejecutado para chat {chat_id}")

            # Reiniciar el bot autom√°ticamente en el nuevo modo
            bot.send_message(chat_id, "üöÄ Reiniciando Grid Bot en modo SANDBOX...")
            success, msg = start_grid_bot_manual()
            if success:
                bot.send_message(chat_id, "‚úÖ Grid Bot iniciado en modo SANDBOX.")
            else:
                bot.send_message(chat_id, f"‚ö†Ô∏è No se pudo iniciar el bot autom√°ticamente: {msg}")

        except Exception as e:
            error_message = f"‚ùå Error al cambiar a modo sandbox: {str(e)}"
            bot.send_message(chat_id, error_message)
            logger.error(f"‚ùå Error en handle_modo_sandbox_command: {e}")

    def handle_estado_cerebro_command(self, chat_id: str, message_text: str, bot):
        """
        Comando /estado_cerebro: Muestra estado detallado del cerebro
        """
        try:
            from services.grid.main import estado_cerebro
            
            message = f"""
üß† **ESTADO DETALLADO DEL CEREBRO**

üìä **Decisi√≥n Actual:**
‚Ä¢ Acci√≥n: {estado_cerebro.get('decision', 'No disponible')}
‚Ä¢ Fuente: {estado_cerebro.get('fuente', 'No disponible')}
‚Ä¢ √öltima actualizaci√≥n: {estado_cerebro.get('ultima_actualizacion', 'No disponible')}

üîÑ **Significado de las decisiones:**
‚Ä¢ OPERAR_GRID: Condiciones favorables para trading
‚Ä¢ PAUSAR_GRID: Condiciones desfavorables, pausa recomendada

üì° **Integraci√≥n:**
‚Ä¢ Cerebro monitorea mercado cada 2 horas
‚Ä¢ Notifica autom√°ticamente al Grid
‚Ä¢ An√°lisis basado en ADX y volatilidad
"""
            
            bot.send_message(chat_id, message)
            logger.info(f"‚úÖ Estado del cerebro enviado a chat {chat_id}")
            
        except Exception as e:
            error_message = f"‚ùå Error al obtener estado del cerebro: {str(e)}"
            bot.send_message(chat_id, error_message)
            logger.error(f"‚ùå Error en handle_estado_cerebro_command: {e}")

    def handle_modo_actual_command(self, chat_id: str, message_text: str, bot):
        """
        Comando /modo_actual: Muestra el modo de trading actual
        """
        try:
            from services.grid.main import obtener_configuracion_trading
            
            config = obtener_configuracion_trading()
            modo_icon = "üü¢" if config['modo'] == "PRODUCTIVO" else "üü°"
            
            message = f"""
{modo_icon} **MODO DE TRADING ACTUAL**

‚Ä¢ Modo: {config['modo']}
‚Ä¢ Descripci√≥n: {config['descripcion']}

üí° **Comandos disponibles:**
‚Ä¢ /modo_productivo - Cambiar a trading real
‚Ä¢ /modo_sandbox - Cambiar a paper trading
‚Ä¢ /status - Estado completo del sistema
‚Ä¢ /info_config - Info sobre configuraci√≥n optimizada
"""
            
            bot.send_message(chat_id, message)
            logger.info(f"‚úÖ Modo actual enviado a chat {chat_id}")
            
        except Exception as e:
            error_message = f"‚ùå Error al obtener modo actual: {str(e)}"
            bot.send_message(chat_id, error_message)
            logger.error(f"‚ùå Error en handle_modo_actual_command: {e}")

    def handle_info_config_command(self, chat_id: str, message_text: str, bot):
        """
        Comando /info_config: Muestra informaci√≥n sobre la configuraci√≥n optimizada
        """
        try:
            from services.grid.main import obtener_configuracion_trading
            
            config = obtener_configuracion_trading()
            modo_icon = "üü¢" if config['modo'] == "PRODUCTIVO" else "üü°"
            
            # Calcular capital m√≠nimo para 30 niveles
            capital_minimo = 30 * 25  # 750 USDT
            
            message = f"""
üìä **CONFIGURACI√ìN OPTIMIZADA v3.0**

üéØ **Par√°metros actuales (FIJOS):**
‚Ä¢ Niveles de grid: 30 (√≥ptimo validado)
‚Ä¢ Rango de precios: 10% (√≥ptimo validado)
‚Ä¢ Capital sandbox: $1000 USDT (fijo)
‚Ä¢ Capital productivo m√≠nimo: ${capital_minimo} USDT

üß† **Integraci√≥n con Cerebro:**
‚Ä¢ ADX < 30: Condiciones favorables
‚Ä¢ Volatilidad > 4%: Mercado activo
‚Ä¢ Stop-loss autom√°tico: 5% por defecto
‚Ä¢ Trailing: Desactivado (Cerebro decide)

{modo_icon} **Modo actual: {config['modo']}**

üí∞ **¬øPor qu√© ${capital_minimo} USDT m√≠nimo?**
‚Ä¢ 30 niveles requieren diversificaci√≥n
‚Ä¢ ~$25 USDT por nivel para cubrir comisiones
‚Ä¢ Comisiones Binance: 0.1% por trade
‚Ä¢ Spread entre compra/venta
‚Ä¢ Fluctuaciones del 10% de rango
‚Ä¢ Liquidez para recompras

üîÑ **Evoluci√≥n del sistema:**

üìà **VERSI√ìN ACTUAL (v3.0):**
‚Ä¢ Par√°metros fijos: 30 niveles, 10% rango
‚Ä¢ Cerebro decide: ¬øCu√°ndo operar?
‚Ä¢ Configuraci√≥n: Solo par + capital

üöÄ **VERSI√ìN FUTURA (v4.0):**
‚Ä¢ Cerebro decide: ¬øCu√°ndo operar?
‚Ä¢ Cerebro decide: ¬øCu√°ntos niveles? (din√°mico)
‚Ä¢ Cerebro decide: ¬øQu√© rango usar? (din√°mico)
‚Ä¢ Configuraci√≥n: Solo par + capital m√≠nimo

üß† **Cerebro Inteligente Futuro:**
‚Ä¢ An√°lisis de mercado en tiempo real
‚Ä¢ Selecci√≥n din√°mica de par√°metros
‚Ä¢ Adaptaci√≥n autom√°tica a condiciones
‚Ä¢ Optimizaci√≥n continua por IA

üí° Usa /config para aplicar la configuraci√≥n actual
"""
            
            bot.send_message(chat_id, message)
            logger.info(f"‚úÖ Info configuraci√≥n enviada a chat {chat_id}")
            
        except Exception as e:
            error_message = f"‚ùå Error al obtener info configuraci√≥n: {str(e)}"
            bot.send_message(chat_id, error_message)
            logger.error(f"‚ùå Error en handle_info_config_command: {e}") 