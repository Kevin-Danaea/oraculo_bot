"""
Handler para comandos b√°sicos del Grid Bot.
Maneja comandos como start, status, delete_config, etc.
"""
import threading
import time
from datetime import datetime
import asyncio
import html

from shared.services.telegram_bot_service import TelegramBot
from shared.services.logging_config import get_logger
from services.grid.schedulers.multibot_scheduler import (
    get_multibot_scheduler,
    start_multibot_scheduler,
    stop_multibot_scheduler
)
from services.grid.core.trading_mode_manager import trading_mode_manager
from services.grid.core.cerebro_integration import cerebro_client
from services.grid.data.config_repository import get_all_active_configs_for_user
from .base_handler import BaseHandler

logger = get_logger(__name__)


class BasicCommandsHandler(BaseHandler):
    """Handler para comandos b√°sicos del Grid Bot"""
    
    async def handle_start_command(self, chat_id: str, message_text: str, bot: TelegramBot):
        """Maneja el comando /start"""
        try:
            # Limpiar estados de conversaci√≥n
            bot.clear_conversation_state(chat_id)
            
            message = """
ü§ñ GRID BOT V3.0 - SISTEMA MULTIBOT AUT√ìNOMO

üß† Arquitectura Inteligente:
‚Ä¢ Monitoreo autom√°tico de 3 pares simult√°neos (ETH, BTC, AVAX)
‚Ä¢ El Cerebro decide cu√°ndo operar cada par
‚Ä¢ Activaci√≥n/desactivaci√≥n autom√°tica seg√∫n condiciones del mercado
‚Ä¢ Notificaciones autom√°ticas por Telegram

üì± Comandos Esenciales:

Control del Sistema:
‚Ä¢ /start_bot - Inicia el sistema multibot
‚Ä¢ /stop_bot - Detiene el sistema multibot
‚Ä¢ /status - Estado completo del sistema

Configuraci√≥n:
‚Ä¢ /config - Configurar capital para cada par

Informaci√≥n:
‚Ä¢ /balance - Balance y P&L consolidado
‚Ä¢ /estado_cerebro - An√°lisis del cerebro

Modo de Trading:
‚Ä¢ /modo_productivo - Cambiar a dinero real
‚Ä¢ /modo_sandbox - Cambiar a paper trading

üõ°Ô∏è SEGURIDAD: El bot inicia en MODO SANDBOX por defecto
üí∞ Para trading real, usa /modo_productivo manualmente
"""
            
            # Verificar estado actual y modo
            trading_config = trading_mode_manager.get_config()
            modo_icon = "üü°" if trading_config['modo'] == 'SANDBOX' else "üü¢"
            
            scheduler = get_multibot_scheduler()
            if scheduler and scheduler.scheduler.running:
                message += "üü¢ Estado Multibot: Ejecut√°ndose\n"
            else:
                message += "üî¥ Estado Multibot: Detenido\n"
            
            message += f"{modo_icon} Modo Trading: {trading_config['modo']}\n"
            
            # Verificar si tiene configuraci√≥n guardada
            user_config = self.get_user_config(chat_id)
            if user_config:
                message += f"‚öôÔ∏è Configuraci√≥n: {user_config.pair} con ${user_config.total_capital}\n"
            else:
                message += "‚öôÔ∏è Configuraci√≥n: No configurado\n"
            
            message += "\nüìã Comandos principales:\n"
            message += "/config - Configurar capital por par\n"
            message += "/start_bot - Iniciar sistema multibot\n"
            message += "/stop_bot - Detener sistema multibot\n"
            message += "/status - Estado completo del sistema\n"
            message += "/balance - Balance y P&L consolidado\n\n"
            message += "üîÑ Control de modo trading:\n"
            message += "/modo_productivo - Cambiar a dinero real ‚ö†Ô∏è\n"
            message += "/modo_sandbox - Cambiar a simulaci√≥n ‚úÖ\n\n"
            message += "üß† Estado del cerebro:\n"
            message += "/estado_cerebro - Ver an√°lisis del cerebro\n"
            
            await bot.send_message(chat_id, message)
            
        except Exception as e:
            await self.send_error_message(bot, chat_id, "comando start", e)
    
    async def handle_start_bot_command(self, chat_id: str, message_text: str, bot: TelegramBot):
        """Maneja el comando /start_bot - V2 con modo manual"""
        try:
            is_productive = trading_mode_manager.is_productive()
            
            # L√ìGICA DIFERENTE SEG√öN MODO
            if is_productive:
                # MODO PRODUCTIVO: Requiere configuraci√≥n guardada
                user_config = self.get_user_config(chat_id)
                if not user_config:
                    message = "‚ö†Ô∏è No tienes configuraci√≥n guardada\n\n"
                    message += "Usa /config para configurar el bot primero."
                    await bot.send_message(chat_id, message)
                    return
            else:
                # MODO SANDBOX: Usar configuraci√≥n fija
                user_config = None  # No necesitamos config de BD en sandbox
            
            # Verificar estado del multibot
            scheduler = get_multibot_scheduler()
            status = scheduler.get_status()
            
            if status['total_active_bots'] > 0:
                await bot.send_message(chat_id, "‚ö†Ô∏è El multibot ya est√° ejecut√°ndose. Usa /stop_bot para detenerlo primero.")
                return
            
            if not status['scheduler_running']:
                message = "‚ö†Ô∏è Servicio no est√° listo\n\n"
                message += "El scheduler no est√° activo. Contacta al administrador."
                await bot.send_message(chat_id, message)
                return

            await bot.send_message(chat_id, "‚è≥ Iniciando Grid Bot...")
            
            # Iniciar bot manualmente en una tarea de fondo para no bloquear al bot de telegram
            asyncio.create_task(self._start_bot_async(chat_id, bot, is_productive, user_config))

        except Exception as e:
            await self.send_error_message(bot, chat_id, "start_bot", e)

    async def _start_bot_async(self, chat_id, bot, is_productive, user_config):
        try:
            scheduler = get_multibot_scheduler()

            # Forzar limpieza de estado antes de iniciar para evitar race conditions
            logger.info("üßπ Forzando limpieza de estado del scheduler antes de iniciar...")
            scheduler.force_stop_and_clear_all()
            await asyncio.sleep(1)  # Dar un momento para que los hilos antiguos terminen la limpieza

            # 1. Asegurarse de que el scheduler general est√© corriendo
            if not scheduler.scheduler.running:
                scheduler.start()
            
            # 2. Consultar las decisiones del Cerebro para todos los pares
            await bot.send_message(chat_id, "üß† Consultando decisiones del Cerebro para todos los pares...")
            decisiones = await cerebro_client.consultar_y_procesar_batch()

            if not decisiones:
                await bot.send_message(chat_id, "‚ö†Ô∏è No se pudo obtener el estado inicial del cerebro. No se iniciar√° ning√∫n bot.")
                return

            # 3. Obtener las configuraciones del usuario
            configs = get_all_active_configs_for_user(chat_id)
            if not configs:
                await bot.send_message(chat_id, "‚ö†Ô∏è No tienes configuraciones activas. Usa /config para configurar los pares.")
                return

            # 4. Iniciar/pausar bots y recopilar informaci√≥n para el resumen
            bots_iniciados = []
            bots_pausados = []

            for config in configs:
                pair = config['pair']
                decision_data = decisiones.get(pair)

                if decision_data and decision_data.get('decision') == 'OPERAR_GRID':
                    success = scheduler.start_bot_for_pair(pair, config)
                    if success:
                        bots_iniciados.append({'config': config, 'data': decision_data})
                    else:
                        logger.warning(f"Fallo al iniciar bot para {pair} (posiblemente ya activo)")
                else:
                    bots_pausados.append({'config': config, 'data': decision_data})
            
            # 5. Resumen final unificado y detallado
            trading_config = trading_mode_manager.get_config()
            modo_icon = "üü¢" if trading_config['modo'] == 'PRODUCTIVO' else "üü°"
            
            summary_message = f"ü§ñ   <b>GRID BOT - INICIO DEL SISTEMA</b>   ü§ñ\n"
            summary_message += "--------------------------------------\n"
            summary_message += f"üïê {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}\n\n"
            summary_message += f"<b>MODO DE OPERACI√ìN:</b> {modo_icon} {trading_config['modo']}\n"
            summary_message += "--------------------------------------\n\n"
            
            summary_message += "<b>AN√ÅLISIS DEL CEREBRO COMPLETADO</b>\n"
            summary_message += "El sistema ha evaluado las condiciones del mercado y ha tomado las siguientes decisiones:\n\n"

            icon_map = {'ETH': 'üíé', 'BTC': 'üü†', 'AVAX': 'üî¥'}

            if bots_iniciados:
                summary_message += f"üöÄ <b>Bots Autorizados para Trading:</b> ({len(bots_iniciados)} bots)\n"
                summary_message += "<i>(Estos bots comenzar√°n a operar inmediatamente)</i>\n\n"
                for bot_info in bots_iniciados:
                    config = bot_info['config']
                    data = bot_info['data']
                    indicadores = data.get('indicadores', {})
                    pair = config['pair']
                    crypto_symbol = pair.split('/')[0]
                    icon = icon_map.get(crypto_symbol, 'ü™ô')

                    summary_message += f"  ‚Ä¢ {icon} <b>{pair}</b>\n"
                    summary_message += f"    - <b>Capital:</b> ${config['total_capital']:,.2f}\n"
                    summary_message += f"    - <b>Decisi√≥n:</b> {data.get('decision', 'N/A')}\n"
                    summary_message += f"    - <b>Raz√≥n:</b> <i>{html.escape(data.get('razon', 'N/A'))}</i>\n"
                    if indicadores:
                        summary_message += f"    - <b>Indicadores:</b> <pre>ADX: {indicadores.get('adx_actual', 0):.2f}, Vol: {indicadores.get('volatilidad_actual', 0):.4f}, Sent: {indicadores.get('sentiment_promedio', 0):.3f}</pre>\n"
                summary_message += "\n"

            if bots_pausados:
                summary_message += f"‚è∏Ô∏è <b>Bots en Pausa (Standby):</b> ({len(bots_pausados)} bots)\n"
                summary_message += "<i>(Estos bots permanecer√°n inactivos hasta que las condiciones mejoren)</i>\n\n"
                for bot_info in bots_pausados:
                    config = bot_info['config']
                    data = bot_info['data']
                    indicadores = data.get('indicadores', {}) if data else {}
                    razon = data.get('razon', 'Sin datos del cerebro') if data else 'Sin datos del cerebro'
                    pair = config['pair']
                    crypto_symbol = pair.split('/')[0]
                    icon = icon_map.get(crypto_symbol, 'ü™ô')
                    
                    summary_message += f"  ‚Ä¢ {icon} <b>{pair}</b>\n"
                    summary_message += f"    - <b>Capital:</b> ${config['total_capital']:,.2f}\n"
                    summary_message += f"    - <b>Decisi√≥n:</b> {data.get('decision', 'PAUSAR_GRID') if data else 'PAUSAR_GRID'}\n"
                    summary_message += f"    - <b>Raz√≥n:</b> <i>{html.escape(razon)}</i>\n"
                    if indicadores:
                        summary_message += f"    - <b>Indicadores:</b> <pre>ADX: {indicadores.get('adx_actual', 0):.2f}, Vol: {indicadores.get('volatilidad_actual', 0):.4f}, Sent: {indicadores.get('sentiment_promedio', 0):.3f}</pre>\n"
                summary_message += "\n"

            summary_message += "--------------------------------------\n"
            summary_message += "<b>RESUMEN DEL SISTEMA</b>\n"
            
            total_capital_activo = sum(b['config']['total_capital'] for b in bots_iniciados)
            summary_message += f"‚Ä¢ <b>Capital Activo (en trading):</b> ${total_capital_activo:,.2f}\n"

            final_status = scheduler.get_status()
            summary_message += f"‚Ä¢ <b>Bots Activos:</b> {final_status['total_active_bots']} / {len(configs)}\n"
            summary_message += "‚Ä¢ <b>Pr√≥ximo An√°lisis del Cerebro:</b> ~1 hora\n"
            summary_message += "--------------------------------------\n\n"
            
            summary_message += "El sistema est√° ahora en modo de monitoreo continuo. Recibir√°s res√∫menes de actividad cada 30 minutos.\n\n"
            summary_message += "Usa /status para ver el estado en tiempo real."

            await bot.send_message(chat_id, summary_message)

        except Exception as e:
            await self.send_error_message(bot, chat_id, "start_bot_async", e)

    async def handle_stop_bot_command(self, chat_id: str, message_text: str, bot: TelegramBot):
        """Maneja el comando /stop_bot - V2 con modo manual"""
        try:
            # Verificar estado del multibot
            scheduler = get_multibot_scheduler()
            status = scheduler.get_status()
            
            if status['total_active_bots'] == 0:
                await bot.send_message(chat_id, "‚ÑπÔ∏è El multibot ya est√° detenido (modo standby).")
                return
            
            if not status['scheduler_running']:
                message = "‚ö†Ô∏è <b>No se puede detener el multibot</b>\n\n"
                message += "El scheduler no est√° activo."
                await bot.send_message(chat_id, message)
                return
            
            await bot.send_message(chat_id, "‚è≥ Deteniendo Grid Bot...")
            asyncio.create_task(self._stop_bot_async(chat_id, bot))

        except Exception as e:
            await self.send_error_message(bot, chat_id, "stop_bot", e)

    async def _stop_bot_async(self, chat_id, bot):
        try:
            scheduler = get_multibot_scheduler()
            scheduler.stop_all_bots()
            success = True # Asumimos √©xito, stop_all_bots no retorna valor

            if success:
                message = "üõë <b>Multibot detenido correctamente</b>\n\n"
                message += "‚úÖ Se se√±al√≥ la parada de todos los bots activos\n"
                message += "üßπ Las √≥rdenes ser√°n canceladas autom√°ticamente en sus ciclos\n"
                message += "‚è∏Ô∏è El sistema queda en modo standby\n\n"
                message += "‚ÑπÔ∏è <i>El proceso de cancelaci√≥n puede tomar unos segundos</i>\n"
                message += "‚ñ∂Ô∏è Usa /start_bot para reanudar trading"
                await bot.send_message(chat_id, message)
            else:
                await bot.send_message(chat_id, "‚ùå <b>Error deteniendo multibot</b>")

        except Exception as e:
            await self.send_error_message(bot, chat_id, "stop_bot_async", e)

    async def handle_status_command(self, chat_id: str, message_text: str, bot: TelegramBot):
        """
        Comando /status: Muestra estado del grid bot con integraci√≥n Cerebro
        """
        try:
            is_productive = trading_mode_manager.is_productive()
            
            # Obtener estado del scheduler
            scheduler = get_multibot_scheduler()
            is_running = scheduler.scheduler.running if scheduler else False
            
            # Obtener estado del cerebro y modo de trading
            try:
                cerebro_estado = cerebro_client.estado_cerebro
                config_trading = trading_mode_manager.get_config()
            except ImportError:
                cerebro_estado = {"decision": "No disponible", "fuente": "error"}
                config_trading = {"modo": "No disponible"}
            
            # L√ìGICA DIFERENTE SEG√öN MODO
            if is_productive:
                # MODO PRODUCTIVO: Requiere configuraci√≥n guardada
                user_config = self.get_user_config(chat_id)
                
                if user_config:
                    status_message = f"""
ü§ñ ESTADO DEL GRID BOT

üìä Configuraci√≥n Activa:
‚Ä¢ Par: {user_config.pair}
‚Ä¢ Capital: ${user_config.total_capital:,.2f}
‚Ä¢ Niveles: {user_config.grid_levels}
‚Ä¢ Rango: {user_config.price_range_percent}%

üîÑ Estado del Sistema:
‚Ä¢ Scheduler: {'üü¢ Activo' if is_running else 'üî¥ Inactivo'}
‚Ä¢ Modo Trading: {config_trading.get('modo', 'No disponible')}
‚Ä¢ Modo Operaci√≥n: üß† AUT√ìNOMO (Responde a decisiones del Cerebro)

üß† Estado del Cerebro:
‚Ä¢ Decisi√≥n: {cerebro_estado.get('decision', 'No disponible')}
‚Ä¢ Fuente: {cerebro_estado.get('fuente', 'No disponible')}
‚Ä¢ √öltima actualizaci√≥n: {cerebro_estado.get('ultima_actualizacion', 'No disponible')}

‚ö° Protecciones Avanzadas:
‚Ä¢ Stop Loss: {'üü¢ Activo' if getattr(user_config, 'enable_stop_loss', False) else 'üî¥ Inactivo'}
‚Ä¢ Trailing Up: {'üü¢ Activo' if getattr(user_config, 'enable_trailing_up', False) else 'üî¥ Inactivo'}
"""
                    
                    if hasattr(user_config, 'enable_stop_loss') and getattr(user_config, 'enable_stop_loss', False):
                        status_message += f"‚Ä¢ Stop Loss %: {getattr(user_config, 'stop_loss_percent', 5.0)}%\n"
                else:
                    status_message = f"""
ü§ñ ESTADO DEL GRID BOT

‚ö†Ô∏è Sin configuraci√≥n activa
Usa /config para configurar el bot

üîÑ Estado del Sistema:
‚Ä¢ Scheduler: {'üü¢ Activo' if is_running else 'üî¥ Inactivo'}
‚Ä¢ Modo Trading: {config_trading.get('modo', 'No disponible')}
‚Ä¢ Modo Operaci√≥n: üß† AUT√ìNOMO (Responde a decisiones del Cerebro)

üß† Estado del Cerebro:
‚Ä¢ Decisi√≥n: {cerebro_estado.get('decision', 'No disponible')}
‚Ä¢ Fuente: {cerebro_estado.get('fuente', 'No disponible')}
‚Ä¢ √öltima actualizaci√≥n: {cerebro_estado.get('ultima_actualizacion', 'No disponible')}
"""
            else:
                # MODO SANDBOX: Usar configuraciones de la base de datos
                try:
                    configs = get_all_active_configs_for_user(chat_id)
                    
                    if configs:
                        status_message = f"""
ü§ñ ESTADO DEL GRID BOT

üü° MODO SANDBOX (Paper Trading)

üìä Configuraciones Activas ({len(configs)} pares):
"""
                        for config in configs:
                            decision_icon = "üü¢" if config['last_decision'] == 'OPERAR_GRID' else "üî¥"
                            running_icon = "üü¢" if config['is_running'] else "üî¥"
                            status_message += f"‚Ä¢ {config['pair']}: ${config['total_capital']:,.2f} | {decision_icon} {config['last_decision']} | {running_icon} {'Ejecutando' if config['is_running'] else 'Pausado'}\n"
                        
                        status_message += f"""
üîÑ Estado del Sistema:
‚Ä¢ Scheduler: {'üü¢ Activo' if is_running else 'üî¥ Inactivo'}
‚Ä¢ Modo Trading: {config_trading.get('modo', 'No disponible')}
‚Ä¢ Modo Operaci√≥n: üß† AUT√ìNOMO (Responde a decisiones del Cerebro)

üß† Estado del Cerebro:
‚Ä¢ Decisi√≥n: {cerebro_estado.get('decision', 'No disponible')}
‚Ä¢ Fuente: {cerebro_estado.get('fuente', 'No disponible')}
‚Ä¢ √öltima actualizaci√≥n: {cerebro_estado.get('ultima_actualizacion', 'No disponible')}

‚ö° Protecciones Avanzadas:
‚Ä¢ Stop Loss: üü¢ Activo (5.0%)
‚Ä¢ Trailing Up: üü¢ Activo (Optimiza ganancias)
"""
                    else:
                        status_message = f"""
ü§ñ ESTADO DEL GRID BOT

üü° MODO SANDBOX (Paper Trading)

‚ö†Ô∏è Sin configuraciones activas
Usa /config para configurar los pares

üîÑ Estado del Sistema:
‚Ä¢ Scheduler: {'üü¢ Activo' if is_running else 'üî¥ Inactivo'}
‚Ä¢ Modo Trading: {config_trading.get('modo', 'No disponible')}
‚Ä¢ Modo Operaci√≥n: üß† AUT√ìNOMO (Responde a decisiones del Cerebro)

üß† Estado del Cerebro:
‚Ä¢ Decisi√≥n: {cerebro_estado.get('decision', 'No disponible')}
‚Ä¢ Fuente: {cerebro_estado.get('fuente', 'No disponible')}
‚Ä¢ √öltima actualizaci√≥n: {cerebro_estado.get('ultima_actualizacion', 'No disponible')}
"""
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Error obteniendo configuraciones de BD: {e}")
                    status_message = f"""
ü§ñ ESTADO DEL GRID BOT

üü° MODO SANDBOX (Paper Trading)

üìä Configuraci√≥n Fija (fallback):
‚Ä¢ Par: ETH/USDT
‚Ä¢ Capital: $1,000.00 USDT (fijo)
‚Ä¢ Niveles: 30 (√≥ptimo validado)
‚Ä¢ Rango: 10% (√≥ptimo validado)

üîÑ Estado del Sistema:
‚Ä¢ Scheduler: {'üü¢ Activo' if is_running else 'üî¥ Inactivo'}
‚Ä¢ Modo Trading: {config_trading.get('modo', 'No disponible')}
‚Ä¢ Modo Operaci√≥n: üß† AUT√ìNOMO (Responde a decisiones del Cerebro)

üß† Estado del Cerebro:
‚Ä¢ Decisi√≥n: {cerebro_estado.get('decision', 'No disponible')}
‚Ä¢ Fuente: {cerebro_estado.get('fuente', 'No disponible')}
‚Ä¢ √öltima actualizaci√≥n: {cerebro_estado.get('ultima_actualizacion', 'No disponible')}

‚ö° Protecciones Avanzadas:
‚Ä¢ Stop Loss: üü¢ Activo (5.0%)
‚Ä¢ Trailing Up: üü¢ Activo (Optimiza ganancias)
"""
            
            # Agregar comandos disponibles
            status_message += """

üìù Comandos Nuevos:
‚Ä¢ /modo_productivo - Cambiar a trading real
‚Ä¢ /modo_sandbox - Cambiar a paper trading
‚Ä¢ /estado_cerebro - Ver estado detallado del cerebro
‚Ä¢ /modo_actual - Ver modo de trading actual
"""
            
            await bot.send_message(chat_id, status_message)
            logger.info(f"‚úÖ Estado enviado a chat {chat_id}")
            
        except Exception as e:
            error_message = f"‚ùå Error al obtener el estado: {str(e)}"
            await bot.send_message(chat_id, error_message)
            logger.error(f"‚ùå Error en handle_status_command: {e}")

    async def handle_modo_productivo_command(self, chat_id: str, message_text: str, bot):
        """
        Comando /modo_productivo: Cambia a modo productivo (trading real)
        """
        try:
            scheduler = get_multibot_scheduler()
            status = scheduler.get_status()

            if trading_mode_manager.is_productive():
                config = trading_mode_manager.get_config()
                message = f"""
üü¢ YA EN MODO PRODUCTIVO

‚Ä¢ Modo actual: {config['modo']}
‚Ä¢ Descripci√≥n: {config['descripcion']}
‚Ä¢ Estado: Activo

‚ö†Ô∏è ADVERTENCIA: Trading con dinero real
"""
                await bot.send_message(chat_id, message)
                return

            # Si el multibot est√° corriendo, detenerlo
            if status['total_active_bots'] > 0:
                await bot.send_message(chat_id, "üõë Deteniendo Multibot por cambio de modo...")
                scheduler.stop_all_bots()
                await bot.send_message(chat_id, "‚úÖ Multibot detenido correctamente.")

            # Cambiar a modo productivo
            config = trading_mode_manager.toggle_mode()
            message = f"""
üü¢ CAMBIADO A MODO PRODUCTIVO

‚Ä¢ Nuevo modo: {config['modo']}
‚Ä¢ Descripci√≥n: {config['descripcion']}

‚ö†Ô∏è ADVERTENCIA IMPORTANTE:
Ahora est√°s operando con DINERO REAL en Binance.
Todas las operaciones afectar√°n tu cuenta real.

üîÑ Usa /modo_sandbox para volver a paper trading
"""
            await bot.send_message(chat_id, message)
            logger.info(f"‚úÖ Comando modo_productivo ejecutado para chat {chat_id}")

            # Reiniciar el bot autom√°ticamente en el nuevo modo
            await bot.send_message(chat_id, "üöÄ Reiniciando Multibot en modo PRODUCTIVO...")
            scheduler.start()

        except Exception as e:
            error_message = f"‚ùå Error al cambiar a modo productivo: {str(e)}"
            await bot.send_message(chat_id, error_message)
            logger.error(f"‚ùå Error en handle_modo_productivo_command: {e}")

    async def handle_modo_sandbox_command(self, chat_id: str, message_text: str, bot):
        """
        Comando /modo_sandbox: Cambia a modo sandbox (paper trading)
        """
        try:
            scheduler = get_multibot_scheduler()
            status = scheduler.get_status()

            if not trading_mode_manager.is_productive():
                config = trading_mode_manager.get_config()
                message = f"""
üü° YA EN MODO SANDBOX

‚Ä¢ Modo actual: {config['modo']}
‚Ä¢ Descripci√≥n: {config['descripcion']}
‚Ä¢ Estado: Activo

‚úÖ SEGURO: Paper trading sin riesgo
"""
                await bot.send_message(chat_id, message)
                return

            # Si el multibot est√° corriendo, detenerlo
            if status['total_active_bots'] > 0:
                await bot.send_message(chat_id, "üõë Deteniendo Multibot por cambio de modo...")
                scheduler.stop_all_bots()
                await bot.send_message(chat_id, "‚úÖ Multibot detenido correctamente.")

            # Cambiar a modo sandbox
            config = trading_mode_manager.toggle_mode()
            message = f"""
üü° CAMBIADO A MODO SANDBOX

‚Ä¢ Nuevo modo: {config['modo']}
‚Ä¢ Descripci√≥n: {config['descripcion']}

‚úÖ MODO SEGURO ACTIVADO:
Todas las operaciones son simuladas.
No se usa dinero real.

üîÑ Usa /modo_productivo para trading real
"""
            await bot.send_message(chat_id, message)
            logger.info(f"‚úÖ Comando modo_sandbox ejecutado para chat {chat_id}")

            # Reiniciar el bot autom√°ticamente en el nuevo modo
            await bot.send_message(chat_id, "üöÄ Reiniciando Multibot en modo SANDBOX...")
            scheduler.start()

        except Exception as e:
            error_message = f"‚ùå Error al cambiar a modo sandbox: {str(e)}"
            await bot.send_message(chat_id, error_message)
            logger.error(f"‚ùå Error en handle_modo_sandbox_command: {e}")

    async def handle_estado_cerebro_command(self, chat_id: str, message_text: str, bot):
        """
        Comando /estado_cerebro: Muestra estado detallado del cerebro
        """
        try:
            estado_cerebro = cerebro_client.estado_cerebro
            
            message = f"""
üß† ESTADO DETALLADO DEL CEREBRO

üìä Decisi√≥n Actual:
‚Ä¢ Acci√≥n: {estado_cerebro.get('decision', 'No disponible')}
‚Ä¢ Fuente: {estado_cerebro.get('fuente', 'No disponible')}
‚Ä¢ √öltima actualizaci√≥n: {estado_cerebro.get('ultima_actualizacion', 'No disponible')}

üîÑ Significado de las decisiones:
‚Ä¢ OPERAR_GRID: Condiciones favorables para trading
‚Ä¢ PAUSAR_GRID: Condiciones desfavorables, pausa recomendada

üì° Integraci√≥n:
‚Ä¢ Cerebro monitorea mercado cada 2 horas
‚Ä¢ Notifica autom√°ticamente al Grid
‚Ä¢ An√°lisis basado en ADX y volatilidad
"""
            
            await bot.send_message(chat_id, message)
            logger.info(f"‚úÖ Estado del cerebro enviado a chat {chat_id}")
            
        except Exception as e:
            error_message = f"‚ùå Error al obtener estado del cerebro: {str(e)}"
            await bot.send_message(chat_id, error_message)
            logger.error(f"‚ùå Error en handle_estado_cerebro_command: {e}")

    async def handle_balance_command(self, chat_id: str, message_text: str, bot):
        """
        Comando /balance: Muestra el balance actual de la cuenta
        MEJORADO: Usa nueva funci√≥n de P&L con explicaci√≥n detallada
        """
        try:
            is_productive = trading_mode_manager.is_productive()
            
            # L√ìGICA DIFERENTE SEG√öN MODO
            if is_productive:
                # MODO PRODUCTIVO: Requiere configuraci√≥n guardada
                user_config = self.get_user_config(chat_id)
                if not user_config:
                    await bot.send_message(chat_id, "‚ö†Ô∏è No tienes configuraci√≥n guardada\n\nUsa /config para configurar el bot primero.")
                    return
                
                # Verificar que el multibot est√© ejecut√°ndose para obtener balance real
                scheduler = get_multibot_scheduler()
                status = scheduler.get_status()
                if status['total_active_bots'] == 0:
                    await bot.send_message(chat_id, "‚ö†Ô∏è El multibot no est√° ejecut√°ndose\n\nUsa /start_bot para iniciar el trading y poder ver el balance actual.")
                    return
                
                pair = str(user_config.pair)
                initial_capital = float(getattr(user_config, 'total_capital', 0))
                
            else:
                # MODO SANDBOX: Usar configuraci√≥n fija
                pair = 'ETH/USDT'
                initial_capital = 1000.0  # Capital fijo para sandbox
                
                # En sandbox, no necesitamos verificar si el bot est√° corriendo
                # porque siempre podemos consultar el balance de paper trading
            
            await bot.send_message(chat_id, "‚è≥ Obteniendo balance actual...")
            asyncio.create_task(self._get_balance_async(chat_id, bot, is_productive, pair, initial_capital))

        except Exception as e:
            error_message = f"‚ùå Error al obtener balance: {str(e)}"
            await bot.send_message(chat_id, error_message)
            logger.error(f"‚ùå Error en handle_balance_command: {e}")

    async def _get_balance_async(self, chat_id, bot, is_productive, pair, initial_capital):
        try:
            # Obtener conexi√≥n al exchange
            from services.grid.core.config_manager import get_exchange_connection
            exchange = get_exchange_connection()
            
            # Obtener balance actual
            from shared.services.telegram_service import get_current_balance, calculate_pnl_with_explanation
            balance = get_current_balance(exchange, pair)
            
            # Calcular P&L usando nueva funci√≥n mejorada
            mode = "PRODUCTIVO" if is_productive else "SANDBOX"
            pnl_data = calculate_pnl_with_explanation(balance, initial_capital, mode)
            
            # Crear mensaje con informaci√≥n del modo
            modo_info = "üü¢ PRODUCTIVO" if is_productive else "üü° SANDBOX (Paper Trading)"
            
            message = f"""
üí∞ <b>BALANCE ACTUAL</b>

{modo_info}

üìä <b>Par:</b> {pair}
üíµ <b>Capital inicial:</b> ${initial_capital:,.2f}

üíµ <b>USDT disponible:</b> ${balance['usdt']:.2f}
ü™ô <b>{balance['crypto_symbol']} disponible:</b> {balance['crypto']:.6f}
üíé <b>Valor {balance['crypto_symbol']}:</b> ${balance['crypto_value']:.2f}
üìä <b>Total actual:</b> ${balance['total_value']:.2f}

{pnl_data['pnl_icon']} <b>P&L Total:</b> ${pnl_data['total_pnl']:.2f} ({pnl_data['total_pnl_percentage']:.2f}%)
üí° <i>Capital inicial: ${initial_capital:.2f} | {mode}</i>

üíπ <b>Precio actual:</b> ${balance['current_price']:.2f}

‚è∞ <i>{datetime.now().strftime('%H:%M:%S %d/%m/%Y')}</i>
"""
            
            await bot.send_message(chat_id, message)
            logger.info(f"‚úÖ Balance enviado a chat {chat_id} (modo: {mode})")
            
        except Exception as e:
            error_message = f"‚ùå Error obteniendo balance: {str(e)}"
            await bot.send_message(chat_id, error_message)
            logger.error(f"‚ùå Error en get_balance_async: {e}")

 