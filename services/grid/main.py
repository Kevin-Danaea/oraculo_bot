"""
Grid Worker - Servicio de Trading (Pure Worker)
Ejecuta estrategias de grid trading automatizado como background worker.
Incluye bot de Telegram para control remoto.
Expone minimal FastAPI para health checks √∫nicamente.

INTEGRACI√ìN CEREBRO V3.0:
- Consulta estado inicial del Cerebro al arrancar
- Recibe notificaciones autom√°ticas del Cerebro
- Modo productivo vs sandbox controlable desde Telegram
"""

import time
from contextlib import asynccontextmanager
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from shared.services.logging_config import get_logger

# Importar los nuevos m√≥dulos organizados
from services.grid.core.service_manager import start_grid_service, stop_grid_service
from services.grid.core.cerebro_integration import (
    MODO_PRODUCTIVO,
    estado_cerebro,
    consultar_estado_inicial_cerebro,
    obtener_configuracion_trading,
    alternar_modo_trading
)

# Importar routers
from services.grid.routers import health_router, cerebro_router, config_router

logger = get_logger(__name__)

# ============================================================================
# LIFESPAN MANAGER
# ============================================================================

@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Lifespan de FastAPI para manejar eventos de inicio y cierre.
    """
    # Evento de inicio
    logger.info("üöÄ Iniciando Grid Service...")
    
    # Inicializar el grid service (scheduler, telegram, logs, etc.)
    try:
        scheduler = start_grid_service()
        logger.info("‚úÖ Grid Service iniciado correctamente")
        logger.info("üß† Grid en MODO AUT√ìNOMO - Responde a decisiones del Cerebro")
        logger.info("üîÑ Monitoreo autom√°tico cada 10 minutos")
        logger.info("üì± Comandos manuales: /start_bot, /stop_bot")
    except Exception as e:
        logger.error(f"‚ùå Error al iniciar Grid Service: {e}")
        raise
    
    # NO consultar al cerebro autom√°ticamente - esperar activaci√≥n manual o autom√°tica
    logger.info("üß† Grid en standby - Consulta al cerebro se har√° al activar manualmente o autom√°ticamente")
    
    yield
    
    # Evento de cierre
    logger.info("üõë Cerrando Grid Service...")
    try:
        stop_grid_service()
    except Exception as e:
        logger.error(f"‚ùå Error al detener Grid Service: {e}")

# ============================================================================
# APLICACI√ìN FASTAPI
# ============================================================================

# Crear aplicaci√≥n FastAPI con lifespan
app = FastAPI(
    title="Grid Trading Service",
    description="Servicio de Grid Trading con integraci√≥n Cerebro v3.0",
    version="3.0.0",
    lifespan=lifespan
)

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ============================================================================
# INCLUIR ROUTERS
# ============================================================================

# Incluir routers organizados
app.include_router(health_router)
app.include_router(cerebro_router)
app.include_router(config_router)

# ============================================================================
# PUNTO DE ENTRADA PRINCIPAL
# ============================================================================

if __name__ == "__main__":
    # Iniciar el grid service antes de FastAPI
    try:
        logger.info("üöÄ Iniciando Grid Service...")
        scheduler = start_grid_service()
        logger.info("‚úÖ Grid Service iniciado correctamente")
        
        # Mantener el servicio corriendo
        logger.info("ü§ñ Grid Worker ejecut√°ndose en modo standalone...")
        while True:
            time.sleep(60)  # Revisar cada minuto
            
    except KeyboardInterrupt:
        logger.info("üîÑ Interrupci√≥n manual recibida...")
        stop_grid_service()
    except Exception as e:
        logger.error(f"üí• Error inesperado: {e}")
        stop_grid_service()
        raise

# ============================================================================
# EXPORTAR PARA COMPATIBILIDAD
# ============================================================================

# Exportar variables y funciones para mantener compatibilidad con otros m√≥dulos
__all__ = [
    'app',
    'MODO_PRODUCTIVO',
    'estado_cerebro',
    'consultar_estado_inicial_cerebro',
    'obtener_configuracion_trading',
    'alternar_modo_trading'
] 